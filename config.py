import os
import pymongo
import mysql.connector
from datetime import datetime, timedelta
import urllib.parse

os.system('source /etc/mphrx/cust_env.sh')

envType = os.environ['HOSTNAME']
current_datetime = datetime.now()

if envType == "mimeethupgradedev2":
    """
    Creadentials DB  Mongo
    """
    print("Inside DEV MONGO AND SQLDATAMART DETAILS")
    mongo_ip = '10.150.222.163'
    mongo_port = '27018'
    mongo_user = 'meeth_minerva'
    mongo_password = 'meeth_minerva'
    mongo_db = 'meeth_minervadb'
    """
    SQL Table Info
    """
    host = "10.150.222.163"
    user = "meeth_datamart"
    password = "meeth_datamart"
    database = "meeth_datamartdb"
    port = "3307"

elif envType == "mimeethupgradeqa1":
    """
    Creadentials DB  Mongo
    """
    print("Inside QA MONGO AND SQLDATAMART DETAILS")
    mongo_ip = '10.150.222.164'
    mongo_port = '27018'
    mongo_user = 'atmeeth_minerva'
    mongo_password = 'atmeeth_minerva'
    mongo_db = 'atmeeth_minervadb'
    """
    SQL Table Info
    """
    host = "10.150.222.164"
    user = "atmeeth_datamart"
    password = "atmeeth_datamart"
    database = "atmeeth_datamartdb"
    port = "3307"

elif envType == "atmeeth2":
    """
    Creadentials DB  Mongo
    """
    print("Inside UAT MONGO AND SQLDATAMART DETAILS")
    mongo_ip = '10.150.222.125'
    mongo_port = '27018'
    mongo_user = 'atmeeth_minerva'
    mongo_password = 'atmeeth_minerva'
    mongo_db = 'atmeeth_minervadb'
    """
    SQL Table Info
    """
    host = "10.150.222.125"
    user = "atmeeth_datamart"
    password = "atmeeth_datamart"
    database = "atmeeth_datamartdb"
    port = "3307"


def get_mongo_client():
    print("Inside get_mongo_client")
    uri = "mongodb://%s:%s@%s:%s/%s" % (
        urllib.parse.quote_plus(mongo_user), urllib.parse.quote_plus(mongo_password), mongo_ip, mongo_port, mongo_db)
    print("uri", uri)
    return pymongo.MongoClient(uri)


mysql_connection = mysql.connector.connect(
    host = host,
    user = user,
    password = password,
    database = database,
    port = port
)

print("SQL Data mart Connected")

mysql_cursor = mysql_connection.cursor(buffered=True)

def insertMeethSurgicalRequirements(mongo_id , serviceRequestId ,meethSurgicalRequirements):
        print(f"Inside insertMeethSurgicalRequirements ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS meethSurgicalRequirements (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, antiPlateletMedication TEXT, surgicalRequirementNone TEXT, surgicalRequirementComments TEXT, xRayTypeCodes TEXT, laserTypeCodes TEXT, laserTypeOther TEXT, loaners TEXT, loanerVendor TEXT, loanerTray TEXT, implantDetails TEXT, surgicalReqFrozenSection TEXT, exparelMedication TEXT, ophthalmology TEXT, orthopaedics TEXT, ent_plastics TEXT, genSurgery TEXT, gynecology TEXT, urology TEXT, femtosecond_laser TEXT, resight_used_with_lumera_microscope_only TEXT, indirect_scope TEXT, cytophotocoagulation_laser TEXT, alcon_constellation_machine TEXT, indirect_retina_laser TEXT, ophthalmology_leica_retina TEXT, ophthalmology_alcon_centurion_machine TEXT, ellman_unit TEXT, lumera_microscope TEXT, cryo_machine TEXT, ophthalmology_synthes_midface TEXT, ora_used_with_lumera_microscope_only TEXT, autograft TEXT, bone_tendon_bone TEXT, prp_platelets TEXT, achilles TEXT, semitendinosis TEXT, cancellous_chips TEXT, anterior_tibialis TEXT, microscope TEXT, orthopaedics_large_c_arm TEXT, mini_c_arm TEXT, micro_hand_instruments TEXT, stryker_flexible_reamers TEXT, small_joint_scopes TEXT, s_n_flexible_reamers TEXT, arthrex_biotenodesis TEXT, small_joint_arthroscopy_set TEXT, transportal_guides TEXT, matrix TEXT, traction_tower TEXT, arthrex_acl TEXT, s_n_a TEXT, ankle_distractor TEXT, graft_prep_station TEXT, small_joint_shaver TEXT, power TEXT, arthrex TEXT, neuragen TEXT, linvatec TEXT, stryker TEXT, smith_nephew TEXT, integra TEXT, wright TEXT, zimmer TEXT, nextremity TEXT, accumed_distal_radius TEXT, richards_staples TEXT, synthes TEXT, hand_innoations TEXT, beach_chair TEXT, knee_post TEXT, hand_table TEXT, lateral_shoulder_device TEXT, orange_leg_holder TEXT, hip_distractor TEXT, lateral_post TEXT, wilson_frame TEXT, bean_bag_positioner TEXT, silver_leg_holder TEXT, biolase_diode_epic TEXT, omniguide_dl TEXT, gentle_yag TEXT, co2_lumenis_laser TEXT, omniguide_handpiece_dl TEXT, aura_xp_diode TEXT, co2_lumenis_fraxel TEXT, iridex_ent TEXT, ktp_laser TEXT, omniguide_ear TEXT, slt_yag TEXT, sciton_erbium_laser TEXT, omniguide_handpiece_ear_small_set TEXT, pulse_dye TEXT, brain_lab TEXT, storz_video_tower TEXT, dragonfly_foot_pedal TEXT, brain_lab_tray_instrument TEXT, luxtec_light_box TEXT, pro_cement_mixer TEXT, medtronic_fusion_trays TEXT, diego_console TEXT, leica_ent_microscope TEXT, medtronic_straight_shot_console TEXT, medtronic_fusion_navigation_unit TEXT, zeiss_ent_microscope TEXT, celon_machines TEXT, smoke_evacuator_valley_lab TEXT, facial_nerve_monitor TEXT, coblator_unit TEXT, anspach_electric_drill_console TEXT, skeeter_drill_foot_pedal TEXT, light_boxes_integra TEXT, anspach_nitrogen_drill_foot_pedal TEXT, stryker_core_drill_console TEXT, splint_warmer TEXT, baha_consoles TEXT, klein_pump_wells_johnson TEXT, vaser_unit TEXT, aquamantys_plasma_peak_blade TEXT, grams_liposuction_machine TEXT, vaser_instrument_sets TEXT, niagara_infiltration_pump TEXT, centrifuge TEXT, evicel_pump TEXT, tisseel_spray_pump TEXT, level_l_infusion_unit TEXT, ent_synthes_midface TEXT, electric_pal TEXT, weighing_scales TEXT, kls_martin TEXT, general_davinci_robot TEXT, suction_irrigator TEXT, secondary_monitor TEXT, doppler TEXT, myosure TEXT, olympus_bipolar_resectoscope TEXT, coated_speculum TEXT, fluid_management_system TEXT, Gynecology_davinci_robot TEXT, Gynecology_pressure_bay TEXT, urology_large_c_arm TEXT, holmium_laser TEXT, olympus_bipolar TEXT, eswl_machine TEXT, greenlight_laser TEXT, uronav TEXT, rectal_probe TEXT, olympus_thylium_laser TEXT, Urology_pressure_bay TEXT ,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        print(f"Query executed as ...CREATE TABLE IF NOT EXISTS meethSurgicalRequirements (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, antiPlateletMedication TEXT, surgicalRequirementNone TEXT, surgicalRequirementComments TEXT, xRayTypeCodes TEXT, laserTypeCodes TEXT, laserTypeOther TEXT, loaners TEXT, loanerVendor TEXT, loanerTray TEXT, implantDetails TEXT, surgicalReqFrozenSection TEXT, exparelMedication TEXT, ophthalmology TEXT, orthopaedics TEXT, ent_plastics TEXT, genSurgery TEXT, gynecology TEXT, urology TEXT, femtosecond_laser TEXT, resight_used_with_lumera_microscope_only TEXT, indirect_scope TEXT, cytophotocoagulation_laser TEXT, alcon_constellation_machine TEXT, indirect_retina_laser TEXT, ophthalmology_leica_retina TEXT, ophthalmology_alcon_centurion_machine TEXT, ellman_unit TEXT, lumera_microscope TEXT, cryo_machine TEXT, ophthalmology_synthes_midface TEXT, ora_used_with_lumera_microscope_only TEXT, autograft TEXT, bone_tendon_bone TEXT, prp_platelets TEXT, achilles TEXT, semitendinosis TEXT, cancellous_chips TEXT, anterior_tibialis TEXT, microscope TEXT, orthopaedics_large_c_arm TEXT, mini_c_arm TEXT, micro_hand_instruments TEXT, stryker_flexible_reamers TEXT, small_joint_scopes TEXT, s_n_flexible_reamers TEXT, arthrex_biotenodesis TEXT, small_joint_arthroscopy_set TEXT, transportal_guides TEXT, matrix TEXT, traction_tower TEXT, arthrex_acl TEXT, s_n_a TEXT, ankle_distractor TEXT, graft_prep_station TEXT, small_joint_shaver TEXT, power TEXT, arthrex TEXT, neuragen TEXT, linvatec TEXT, stryker TEXT, smith_nephew TEXT, integra TEXT, wright TEXT, zimmer TEXT, nextremity TEXT, accumed_distal_radius TEXT, richards_staples TEXT, synthes TEXT, hand_innoations TEXT, beach_chair TEXT, knee_post TEXT, hand_table TEXT, lateral_shoulder_device TEXT, orange_leg_holder TEXT, hip_distractor TEXT, lateral_post TEXT, wilson_frame TEXT, bean_bag_positioner TEXT, silver_leg_holder TEXT, biolase_diode_epic TEXT, omniguide_dl TEXT, gentle_yag TEXT, co2_lumenis_laser TEXT, omniguide_handpiece_dl TEXT, aura_xp_diode TEXT, co2_lumenis_fraxel TEXT, iridex_ent TEXT, ktp_laser TEXT, omniguide_ear TEXT, slt_yag TEXT, sciton_erbium_laser TEXT, omniguide_handpiece_ear_small_set TEXT, pulse_dye TEXT, brain_lab TEXT, storz_video_tower TEXT, dragonfly_foot_pedal TEXT, brain_lab_tray_instrument TEXT, luxtec_light_box TEXT, pro_cement_mixer TEXT, medtronic_fusion_trays TEXT, diego_console TEXT, leica_ent_microscope TEXT, medtronic_straight_shot_console TEXT, medtronic_fusion_navigation_unit TEXT, zeiss_ent_microscope TEXT, celon_machines TEXT, smoke_evacuator_valley_lab TEXT, facial_nerve_monitor TEXT, coblator_unit TEXT, anspach_electric_drill_console TEXT, skeeter_drill_foot_pedal TEXT, light_boxes_integra TEXT, anspach_nitrogen_drill_foot_pedal TEXT, stryker_core_drill_console TEXT, splint_warmer TEXT, baha_consoles TEXT, klein_pump_wells_johnson TEXT, vaser_unit TEXT, aquamantys_plasma_peak_blade TEXT, grams_liposuction_machine TEXT, vaser_instrument_sets TEXT, niagara_infiltration_pump TEXT, centrifuge TEXT, evicel_pump TEXT, tisseel_spray_pump TEXT, level_l_infusion_unit TEXT, ent_synthes_midface TEXT, electric_pal TEXT, weighing_scales TEXT, kls_martin TEXT, general_davinci_robot TEXT, suction_irrigator TEXT, secondary_monitor TEXT, doppler TEXT, myosure TEXT, olympus_bipolar_resectoscope TEXT, coated_speculum TEXT, fluid_management_system TEXT, Gynecology_davinci_robot TEXT, Gynecology_pressure_bay TEXT, urology_large_c_arm TEXT, holmium_laser TEXT, olympus_bipolar TEXT, eswl_machine TEXT, greenlight_laser TEXT, uronav TEXT, rectal_probe TEXT, olympus_thylium_laser TEXT, Urology_pressure_bay TEXT ,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, meethSurgicalRequirements['antiPlateletMedication'], meethSurgicalRequirements['surgicalRequirementNone'], meethSurgicalRequirements['surgicalRequirementComments'], meethSurgicalRequirements['xRayTypeCodes'], meethSurgicalRequirements['laserTypeCodes'], meethSurgicalRequirements['laserTypeOther'], meethSurgicalRequirements['loaners'], meethSurgicalRequirements['loanerVendor'], meethSurgicalRequirements['loanerTray'], meethSurgicalRequirements['implantDetails'], meethSurgicalRequirements['surgicalReqFrozenSection'], meethSurgicalRequirements['exparelMedication'], meethSurgicalRequirements['ophthalmology'], meethSurgicalRequirements['orthopaedics'], meethSurgicalRequirements['ent_plastics'], meethSurgicalRequirements['genSurgery'], meethSurgicalRequirements['gynecology'],meethSurgicalRequirements['urology'], meethSurgicalRequirements['femtosecond_laser'], meethSurgicalRequirements['resight_used_with_lumera_microscope_only'], meethSurgicalRequirements['indirect_scope'], meethSurgicalRequirements['cytophotocoagulation_laser'], meethSurgicalRequirements['alcon_constellation_machine'], meethSurgicalRequirements['indirect_retina_laser'], meethSurgicalRequirements['ophthalmology_leica_retina'], meethSurgicalRequirements['alcon_centurion_machine'], meethSurgicalRequirements['ellman_unit'], meethSurgicalRequirements['lumera_microscope'], meethSurgicalRequirements['cryo_machine'], meethSurgicalRequirements['ophthalmology_synthes_midface'], meethSurgicalRequirements['ora_used_with_lumera_microscope_only'], meethSurgicalRequirements['autograft'], meethSurgicalRequirements['bone_tendon_bone'], meethSurgicalRequirements['prp_platelets'], meethSurgicalRequirements['achilles'], meethSurgicalRequirements['semitendinosis'], meethSurgicalRequirements['cancellous_chips'], meethSurgicalRequirements['anterior_tibialis'], meethSurgicalRequirements['microscope'], meethSurgicalRequirements['orthopaedics_large_c_arm'], meethSurgicalRequirements['mini_c_arm'], meethSurgicalRequirements['micro_hand_instruments'], meethSurgicalRequirements['stryker_flexible_reamers'], meethSurgicalRequirements['small_joint_scopes'], meethSurgicalRequirements['s_n_flexible_reamers'], meethSurgicalRequirements['arthrex_biotenodesis'], meethSurgicalRequirements['small_joint_arthroscopy_set'], meethSurgicalRequirements['transportal_guides'], meethSurgicalRequirements['matrix'], meethSurgicalRequirements['traction_tower'], meethSurgicalRequirements['arthrex_acl'], meethSurgicalRequirements['s_n_a'], meethSurgicalRequirements['ankle_distractor'], meethSurgicalRequirements['graft_prep_station'], meethSurgicalRequirements['small_joint_shaver'], meethSurgicalRequirements['power'], meethSurgicalRequirements['arthrex'], meethSurgicalRequirements['neuragen'], meethSurgicalRequirements['linvatec'], meethSurgicalRequirements['stryker'], meethSurgicalRequirements['smith_nephew'], meethSurgicalRequirements['integra'], meethSurgicalRequirements['wright'], meethSurgicalRequirements['zimmer'], meethSurgicalRequirements['nextremity'], meethSurgicalRequirements['accumed_distal_radius'], meethSurgicalRequirements['richards_staples'],meethSurgicalRequirements['synthes'], meethSurgicalRequirements['hand_innoations'], meethSurgicalRequirements['beach_chair'], meethSurgicalRequirements['knee_post'], meethSurgicalRequirements['hand_table'], meethSurgicalRequirements['lateral_shoulder_device'], meethSurgicalRequirements['orange_leg_holder'], meethSurgicalRequirements['hip_distractor'], meethSurgicalRequirements['lateral_post'], meethSurgicalRequirements['wilson_frame'], meethSurgicalRequirements['bean_bag_positioner'], meethSurgicalRequirements['silver_leg_holder'], meethSurgicalRequirements['biolase_diode_epic'], meethSurgicalRequirements['omniguide_dl'], meethSurgicalRequirements['gentle_yag'], meethSurgicalRequirements['co2_lumenis_laser'], meethSurgicalRequirements['omniguide_handpiece_dl'], meethSurgicalRequirements['aura_xp_diode'], meethSurgicalRequirements['co2_lumenis_fraxel'], meethSurgicalRequirements['iridex_ent'], meethSurgicalRequirements['ktp_laser'], meethSurgicalRequirements['omniguide_ear'], meethSurgicalRequirements['slt_yag'], meethSurgicalRequirements['sciton_erbium_laser'], meethSurgicalRequirements['omniguide_handpiece_ear_small_set'], meethSurgicalRequirements['pulse_dye'], meethSurgicalRequirements['brain_lab'], meethSurgicalRequirements['storz_video_tower'], meethSurgicalRequirements['dragonfly_foot_pedal'], meethSurgicalRequirements['brain_lab_tray_instrument'], meethSurgicalRequirements['luxtec_light_box'], meethSurgicalRequirements['pro_cement_mixer'], meethSurgicalRequirements['medtronic_fusion_trays'], meethSurgicalRequirements['diego_console'], meethSurgicalRequirements['leica_ent_microscope'], meethSurgicalRequirements['medtronic_straight_shot_console'], meethSurgicalRequirements['medtronic_fusion_navigation_unit'], meethSurgicalRequirements['zeiss_ent_microscope'], meethSurgicalRequirements['celon_machines'], meethSurgicalRequirements['smoke_evacuator_valley_lab'], meethSurgicalRequirements['facial_nerve_monitor'], meethSurgicalRequirements['coblator_unit'], meethSurgicalRequirements['anspach_electric_drill_console'], meethSurgicalRequirements['skeeter_drill_foot_pedal'], meethSurgicalRequirements['light_boxes_integra'], meethSurgicalRequirements['anspach_nitrogen_drill_foot_pedal'],meethSurgicalRequirements['stryker_core_drill_console'], meethSurgicalRequirements['splint_warmer'], meethSurgicalRequirements['baha_consoles'], meethSurgicalRequirements['klein_pump_wells_johnson'], meethSurgicalRequirements['vaser_unit'], meethSurgicalRequirements['aquamantys_plasma_peak_blade'], meethSurgicalRequirements['grams_liposuction_machine'], meethSurgicalRequirements['vaser_instrument_sets'], meethSurgicalRequirements['niagara_infiltration_pump'], meethSurgicalRequirements['centrifuge'], meethSurgicalRequirements['evicel_pump'], meethSurgicalRequirements['tisseel_spray_pump'], meethSurgicalRequirements['level_l_infusion_unit'], meethSurgicalRequirements['ent_synthes_midface'], meethSurgicalRequirements['electric_pal'], meethSurgicalRequirements['weighing_scales'], meethSurgicalRequirements['kls_martin'], meethSurgicalRequirements['general_davinci_robot'], meethSurgicalRequirements['suction_irrigator'], meethSurgicalRequirements['secondary_monitor'], meethSurgicalRequirements['doppler'], meethSurgicalRequirements['myosure'], meethSurgicalRequirements['olympus_bipolar_resectoscope'], meethSurgicalRequirements['coated_speculum'], meethSurgicalRequirements['fluid_management_system'], meethSurgicalRequirements['Gynecology_davinci_robot'], meethSurgicalRequirements['Gynecology_pressure_bay'], meethSurgicalRequirements['urology_large_c_arm'], meethSurgicalRequirements['holmium_laser'], meethSurgicalRequirements['olympus_bipolar'], meethSurgicalRequirements['eswl_machine'], meethSurgicalRequirements['greenlight_laser'], meethSurgicalRequirements['uronav'], meethSurgicalRequirements['rectal_probe'], meethSurgicalRequirements['olympus_thylium_laser'], meethSurgicalRequirements['Urology_pressure_bay']
                      )
        mysql_cursor.execute(
                                "INSERT INTO meethSurgicalRequirements (serviceRequest_mongo_id, serviceRequestId, antiPlateletMedication,surgicalRequirementNone,surgicalRequirementComments, xRayTypeCodes, laserTypeCodes, laserTypeOther, loaners, loanerVendor, loanerTray, implantDetails, surgicalReqFrozenSection, exparelMedication, ophthalmology, orthopaedics, ent_plastics, genSurgery, gynecology, urology, femtosecond_laser, resight_used_with_lumera_microscope_only, indirect_scope, cytophotocoagulation_laser, alcon_constellation_machine, indirect_retina_laser, ophthalmology_leica_retina, ophthalmology_alcon_centurion_machine, ellman_unit, lumera_microscope, cryo_machine, ophthalmology_synthes_midface, ora_used_with_lumera_microscope_only, autograft, bone_tendon_bone, prp_platelets, achilles, semitendinosis, cancellous_chips, anterior_tibialis, microscope, orthopaedics_large_c_arm, mini_c_arm, micro_hand_instruments, stryker_flexible_reamers, small_joint_scopes, s_n_flexible_reamers, arthrex_biotenodesis, small_joint_arthroscopy_set, transportal_guides, matrix, traction_tower, arthrex_acl, s_n_a, ankle_distractor, graft_prep_station, small_joint_shaver, power, arthrex, neuragen, linvatec, stryker, smith_nephew, integra, wright, zimmer, nextremity, accumed_distal_radius, richards_staples, synthes, hand_innoations, beach_chair, knee_post, hand_table, lateral_shoulder_device, orange_leg_holder, hip_distractor, lateral_post, wilson_frame, bean_bag_positioner, silver_leg_holder, biolase_diode_epic, omniguide_dl, gentle_yag, co2_lumenis_laser, omniguide_handpiece_dl, aura_xp_diode, co2_lumenis_fraxel, iridex_ent, ktp_laser, omniguide_ear, slt_yag, sciton_erbium_laser, omniguide_handpiece_ear_small_set, pulse_dye, brain_lab, storz_video_tower, dragonfly_foot_pedal, brain_lab_tray_instrument, luxtec_light_box, pro_cement_mixer, medtronic_fusion_trays, diego_console, leica_ent_microscope, medtronic_straight_shot_console, medtronic_fusion_navigation_unit, zeiss_ent_microscope, celon_machines, smoke_evacuator_valley_lab, facial_nerve_monitor, coblator_unit, anspach_electric_drill_console, skeeter_drill_foot_pedal, light_boxes_integra, anspach_nitrogen_drill_foot_pedal, stryker_core_drill_console, splint_warmer, baha_consoles, klein_pump_wells_johnson, vaser_unit, aquamantys_plasma_peak_blade, grams_liposuction_machine, vaser_instrument_sets,niagara_infiltration_pump, centrifuge, evicel_pump, tisseel_spray_pump, level_l_infusion_unit, ent_synthes_midface, electric_pal, weighing_scales, kls_martin, general_davinci_robot, suction_irrigator, secondary_monitor, doppler, myosure, olympus_bipolar_resectoscope, coated_speculum, fluid_management_system, Gynecology_davinci_robot, Gynecology_pressure_bay, urology_large_c_arm, holmium_laser, olympus_bipolar, eswl_machine, greenlight_laser, uronav, rectal_probe, olympus_thylium_laser, Urology_pressure_bay) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table meethSurgicalRequirements")
        mysql_connection.commit()

def updatemeethSurgicalRequirements(mongo_id , serviceRequestId ,meethSurgicalRequirements):
        print(f"Inside updatemeethSurgicalRequirements to update document in meethSurgicalRequirements table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE meethSurgicalRequirements SET serviceRequestId = %s, antiPlateletMedication = %s, surgicalRequirementNone = %s, surgicalRequirementComments = %s, xRayTypeCodes = %s, laserTypeCodes = %s, laserTypeOther = %s, loaners = %s, loanerVendor = %s, loanerTray = %s, implantDetails = %s, surgicalReqFrozenSection = %s, exparelMedication = %s, ophthalmology = %s, orthopaedics = %s, ent_plastics = %s, genSurgery = %s, gynecology = %s, urology = %s, femtosecond_laser = %s, resight_used_with_lumera_microscope_only = %s, indirect_scope = %s, cytophotocoagulation_laser = %s, alcon_constellation_machine = %s, indirect_retina_laser = %s, ophthalmology_leica_retina = %s, ophthalmology_alcon_centurion_machine = %s, ellman_unit = %s, lumera_microscope = %s, cryo_machine = %s, ophthalmology_synthes_midface = %s, ora_used_with_lumera_microscope_only = %s, autograft = %s, bone_tendon_bone = %s, prp_platelets = %s, achilles = %s, semitendinosis = %s, cancellous_chips = %s, anterior_tibialis = %s, microscope = %s, orthopaedics_large_c_arm = %s, mini_c_arm = %s, micro_hand_instruments = %s, stryker_flexible_reamers = %s, small_joint_scopes = %s, s_n_flexible_reamers = %s, arthrex_biotenodesis = %s, small_joint_arthroscopy_set = %s, transportal_guides = %s, matrix = %s, traction_tower = %s, arthrex_acl = %s, s_n_a = %s, ankle_distractor = %s, graft_prep_station = %s, small_joint_shaver = %s, power = %s, arthrex = %s, neuragen = %s, linvatec = %s, stryker = %s, smith_nephew = %s, integra = %s, wright = %s, zimmer = %s, nextremity = %s, accumed_distal_radius = %s, richards_staples = %s, synthes = %s, hand_innoations = %s, beach_chair = %s, knee_post = %s, hand_table = %s, lateral_shoulder_device = %s, orange_leg_holder = %s, hip_distractor = %s, lateral_post = %s, wilson_frame = %s, bean_bag_positioner = %s, silver_leg_holder = %s, biolase_diode_epic = %s, omniguide_dl = %s, gentle_yag = %s, co2_lumenis_laser = %s, omniguide_handpiece_dl = %s, aura_xp_diode = %s, co2_lumenis_fraxel = %s, iridex_ent = %s, ktp_laser = %s, omniguide_ear = %s, slt_yag = %s, sciton_erbium_laser = %s, omniguide_handpiece_ear_small_set = %s, pulse_dye = %s, brain_lab = %s, storz_video_tower = %s, dragonfly_foot_pedal = %s, brain_lab_tray_instrument = %s, luxtec_light_box = %s, pro_cement_mixer = %s, medtronic_fusion_trays = %s, diego_console = %s, leica_ent_microscope = %s, medtronic_straight_shot_console = %s, medtronic_fusion_navigation_unit = %s, zeiss_ent_microscope = %s, celon_machines = %s, smoke_evacuator_valley_lab = %s, facial_nerve_monitor = %s, coblator_unit = %s, anspach_electric_drill_console = %s, skeeter_drill_foot_pedal = %s, light_boxes_integra = %s, anspach_nitrogen_drill_foot_pedal = %s, stryker_core_drill_console = %s, splint_warmer = %s, baha_consoles = %s, klein_pump_wells_johnson = %s, vaser_unit = %s, aquamantys_plasma_peak_blade = %s, grams_liposuction_machine = %s, vaser_instrument_sets = %s, niagara_infiltration_pump = %s, centrifuge = %s, evicel_pump = %s, tisseel_spray_pump = %s, level_l_infusion_unit = %s, ent_synthes_midface = %s, electric_pal = %s, weighing_scales = %s, kls_martin = %s, general_davinci_robot = %s, suction_irrigator = %s, secondary_monitor = %s, doppler = %s, myosure = %s, olympus_bipolar_resectoscope = %s, coated_speculum = %s, fluid_management_system = %s, Gynecology_davinci_robot = %s, Gynecology_pressure_bay = %s, urology_large_c_arm = %s, holmium_laser = %s, olympus_bipolar = %s, eswl_machine = %s, greenlight_laser = %s, uronav = %s, rectal_probe = %s, olympus_thylium_laser = %s, Urology_pressure_bay = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, meethSurgicalRequirements['antiPlateletMedication'], meethSurgicalRequirements['surgicalRequirementNone'], meethSurgicalRequirements['surgicalRequirementComments'], meethSurgicalRequirements['xRayTypeCodes'], meethSurgicalRequirements['laserTypeCodes'], meethSurgicalRequirements['laserTypeOther'], meethSurgicalRequirements['loaners'], meethSurgicalRequirements['loanerVendor'], meethSurgicalRequirements['loanerTray'], meethSurgicalRequirements['implantDetails'], meethSurgicalRequirements['surgicalReqFrozenSection'], meethSurgicalRequirements['exparelMedication'], meethSurgicalRequirements['ophthalmology'], meethSurgicalRequirements['orthopaedics'], meethSurgicalRequirements['ent_plastics'], meethSurgicalRequirements['genSurgery'], meethSurgicalRequirements['gynecology'],meethSurgicalRequirements['urology'], meethSurgicalRequirements['femtosecond_laser'], meethSurgicalRequirements['resight_used_with_lumera_microscope_only'], meethSurgicalRequirements['indirect_scope'], meethSurgicalRequirements['cytophotocoagulation_laser'], meethSurgicalRequirements['alcon_constellation_machine'], meethSurgicalRequirements['indirect_retina_laser'], meethSurgicalRequirements['ophthalmology_leica_retina'], meethSurgicalRequirements['alcon_centurion_machine'], meethSurgicalRequirements['ellman_unit'], meethSurgicalRequirements['lumera_microscope'], meethSurgicalRequirements['cryo_machine'], meethSurgicalRequirements['ophthalmology_synthes_midface'], meethSurgicalRequirements['ora_used_with_lumera_microscope_only'], meethSurgicalRequirements['autograft'], meethSurgicalRequirements['bone_tendon_bone'], meethSurgicalRequirements['prp_platelets'], meethSurgicalRequirements['achilles'], meethSurgicalRequirements['semitendinosis'], meethSurgicalRequirements['cancellous_chips'], meethSurgicalRequirements['anterior_tibialis'], meethSurgicalRequirements['microscope'], meethSurgicalRequirements['orthopaedics_large_c_arm'], meethSurgicalRequirements['mini_c_arm'], meethSurgicalRequirements['micro_hand_instruments'], meethSurgicalRequirements['stryker_flexible_reamers'], meethSurgicalRequirements['small_joint_scopes'], meethSurgicalRequirements['s_n_flexible_reamers'], meethSurgicalRequirements['arthrex_biotenodesis'], meethSurgicalRequirements['small_joint_arthroscopy_set'], meethSurgicalRequirements['transportal_guides'], meethSurgicalRequirements['matrix'], meethSurgicalRequirements['traction_tower'], meethSurgicalRequirements['arthrex_acl'], meethSurgicalRequirements['s_n_a'], meethSurgicalRequirements['ankle_distractor'], meethSurgicalRequirements['graft_prep_station'], meethSurgicalRequirements['small_joint_shaver'], meethSurgicalRequirements['power'], meethSurgicalRequirements['arthrex'], meethSurgicalRequirements['neuragen'], meethSurgicalRequirements['linvatec'], meethSurgicalRequirements['stryker'], meethSurgicalRequirements['smith_nephew'], meethSurgicalRequirements['integra'], meethSurgicalRequirements['wright'], meethSurgicalRequirements['zimmer'], meethSurgicalRequirements['nextremity'], meethSurgicalRequirements['accumed_distal_radius'], meethSurgicalRequirements['richards_staples'],meethSurgicalRequirements['synthes'], meethSurgicalRequirements['hand_innoations'], meethSurgicalRequirements['beach_chair'], meethSurgicalRequirements['knee_post'], meethSurgicalRequirements['hand_table'], meethSurgicalRequirements['lateral_shoulder_device'], meethSurgicalRequirements['orange_leg_holder'], meethSurgicalRequirements['hip_distractor'], meethSurgicalRequirements['lateral_post'], meethSurgicalRequirements['wilson_frame'], meethSurgicalRequirements['bean_bag_positioner'], meethSurgicalRequirements['silver_leg_holder'], meethSurgicalRequirements['biolase_diode_epic'], meethSurgicalRequirements['omniguide_dl'], meethSurgicalRequirements['gentle_yag'], meethSurgicalRequirements['co2_lumenis_laser'], meethSurgicalRequirements['omniguide_handpiece_dl'], meethSurgicalRequirements['aura_xp_diode'], meethSurgicalRequirements['co2_lumenis_fraxel'], meethSurgicalRequirements['iridex_ent'], meethSurgicalRequirements['ktp_laser'], meethSurgicalRequirements['omniguide_ear'], meethSurgicalRequirements['slt_yag'], meethSurgicalRequirements['sciton_erbium_laser'], meethSurgicalRequirements['omniguide_handpiece_ear_small_set'], meethSurgicalRequirements['pulse_dye'], meethSurgicalRequirements['brain_lab'], meethSurgicalRequirements['storz_video_tower'], meethSurgicalRequirements['dragonfly_foot_pedal'], meethSurgicalRequirements['brain_lab_tray_instrument'], meethSurgicalRequirements['luxtec_light_box'], meethSurgicalRequirements['pro_cement_mixer'], meethSurgicalRequirements['medtronic_fusion_trays'], meethSurgicalRequirements['diego_console'], meethSurgicalRequirements['leica_ent_microscope'], meethSurgicalRequirements['medtronic_straight_shot_console'], meethSurgicalRequirements['medtronic_fusion_navigation_unit'], meethSurgicalRequirements['zeiss_ent_microscope'], meethSurgicalRequirements['celon_machines'], meethSurgicalRequirements['smoke_evacuator_valley_lab'], meethSurgicalRequirements['facial_nerve_monitor'], meethSurgicalRequirements['coblator_unit'], meethSurgicalRequirements['anspach_electric_drill_console'], meethSurgicalRequirements['skeeter_drill_foot_pedal'], meethSurgicalRequirements['light_boxes_integra'], meethSurgicalRequirements['anspach_nitrogen_drill_foot_pedal'],meethSurgicalRequirements['stryker_core_drill_console'], meethSurgicalRequirements['splint_warmer'], meethSurgicalRequirements['baha_consoles'], meethSurgicalRequirements['klein_pump_wells_johnson'], meethSurgicalRequirements['vaser_unit'], meethSurgicalRequirements['aquamantys_plasma_peak_blade'], meethSurgicalRequirements['grams_liposuction_machine'], meethSurgicalRequirements['vaser_instrument_sets'], meethSurgicalRequirements['niagara_infiltration_pump'], meethSurgicalRequirements['centrifuge'], meethSurgicalRequirements['evicel_pump'], meethSurgicalRequirements['tisseel_spray_pump'], meethSurgicalRequirements['level_l_infusion_unit'], meethSurgicalRequirements['ent_synthes_midface'], meethSurgicalRequirements['electric_pal'], meethSurgicalRequirements['weighing_scales'], meethSurgicalRequirements['kls_martin'], meethSurgicalRequirements['general_davinci_robot'], meethSurgicalRequirements['suction_irrigator'], meethSurgicalRequirements['secondary_monitor'], meethSurgicalRequirements['doppler'], meethSurgicalRequirements['myosure'], meethSurgicalRequirements['olympus_bipolar_resectoscope'], meethSurgicalRequirements['coated_speculum'], meethSurgicalRequirements['fluid_management_system'], meethSurgicalRequirements['Gynecology_davinci_robot'], meethSurgicalRequirements['Gynecology_pressure_bay'], meethSurgicalRequirements['urology_large_c_arm'], meethSurgicalRequirements['holmium_laser'], meethSurgicalRequirements['olympus_bipolar'], meethSurgicalRequirements['eswl_machine'], meethSurgicalRequirements['greenlight_laser'], meethSurgicalRequirements['uronav'], meethSurgicalRequirements['rectal_probe'], meethSurgicalRequirements['olympus_thylium_laser'], meethSurgicalRequirements['Urology_pressure_bay'],mongo_id))
        print(f"Updated document in meethSurgicalRequirements table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def insertcardiacSurgeryLhh(mongo_id , serviceRequestId ,cardiacSurgeryLhh):
        print(f"Inside insertcardiacSurgeryLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS cardiacSurgeryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, CardiacBiologicsTissue TEXT, cryo_aortic_valve TEXT, cryo_vein TEXT, CardiacBiologicsTissueOther TEXT, CardiacEquipment TEXT, acist_power_injector TEXT, cusa_xcel TEXT, harmonic TEXT, imaging_doppler_probe TEXT, laser_tmr TEXT, laser_spectranic TEXT, medtronic_atricure_cryoablation TEXT, maquet_hemopro_white_cord TEXT, xi_robot TEXT, CardiacEquipmentOther TEXT, CardiacImagingSupportService TEXT, hybrid_room TEXT, laser_outlet TEXT, CardiacImagingSupportServiceOther TEXT, CardiacImplant TEXT, aortic_valve TEXT, atricure_clips TEXT, biomet TEXT, endovasular_stent_graft TEXT, gelweave_graft TEXT, kls TEXT, mitral_valve TEXT, mitral_ring_bend TEXT, pericardium_patch TEXT, tricuspid_valve_ring_bend TEXT, CardiacImplantOther TEXT, CardiacLabRequests TEXT, CardiacPathology TEXT, CardiacLabRequestsOther TEXT, CardiacPositioningDevices TEXT, bean_bag TEXT, CardiacPinkPad TEXT, CardiacPositioningDevicesOther TEXT, CardiacSupplies TEXT, bioglu TEXT, ballon_pump_50cc TEXT, coseal TEXT, hemopro TEXT, mital_clips_for_hybrid_case TEXT, proximal_anastomosis_device TEXT, tissel TEXT, vasoview TEXT, CardiacSuppliesOther TEXT, CardiacLoaners TEXT, CardiacLoanersVendor TEXT, CardiacTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        print(f"Query executed as ...CREATE TABLE IF NOT EXISTS cardiacSurgeryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, CardiacBiologicsTissue TEXT, cryo_aortic_valve TEXT, cryo_vein TEXT, CardiacBiologicsTissueOther TEXT, CardiacEquipment TEXT, acist_power_injector TEXT, cusa_xcel TEXT, harmonic TEXT, imaging_doppler_probe TEXT, laser_tmr TEXT, laser_spectranic TEXT, medtronic_atricure_cryoablation TEXT, maquet_hemopro_white_cord TEXT, xi_robot TEXT, CardiacEquipmentOther TEXT, CardiacImagingSupportService TEXT, hybrid_room TEXT, laser_outlet TEXT, CardiacImagingSupportServiceOther TEXT, CardiacImplant TEXT, aortic_valve TEXT, atricure_clips TEXT, biomet TEXT, endovasular_stent_graft TEXT, gelweave_graft TEXT, kls TEXT, mitral_valve TEXT, mitral_ring_bend TEXT, pericardium_patch TEXT, tricuspid_valve_ring_bend TEXT, CardiacImplantOther TEXT, CardiacLabRequests TEXT, CardiacPathology TEXT, CardiacLabRequestsOther TEXT, CardiacPositioningDevices TEXT, bean_bag TEXT, CardiacPinkPad TEXT, CardiacPositioningDevicesOther TEXT, CardiacSupplies TEXT, bioglu TEXT, ballon_pump_50cc TEXT, coseal TEXT, hemopro TEXT, mital_clips_for_hybrid_case TEXT, proximal_anastomosis_device TEXT, tissel TEXT, vasoview TEXT, CardiacSuppliesOther TEXT, CardiacLoaners TEXT, CardiacLoanersVendor TEXT, CardiacTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, cardiacSurgeryLhh['CardiacBiologicsTissue'], cardiacSurgeryLhh['cryo_aortic_valve'], cardiacSurgeryLhh['cryo_vein'], cardiacSurgeryLhh['CardiacBiologicsTissueOther'], cardiacSurgeryLhh['CardiacEquipment'], cardiacSurgeryLhh['acist_power_injector'], cardiacSurgeryLhh['cusa_xcel'], cardiacSurgeryLhh['harmonic'], cardiacSurgeryLhh['imaging_doppler_probe'], cardiacSurgeryLhh['laser_tmr'], cardiacSurgeryLhh['laser_spectranic'], cardiacSurgeryLhh['medtronic_atricure_cryoablation'], cardiacSurgeryLhh['maquet_hemopro_white_cord'], cardiacSurgeryLhh['xi_robot'], cardiacSurgeryLhh['CardiacEquipmentOther'], cardiacSurgeryLhh['CardiacImagingSupportService'], cardiacSurgeryLhh['hybrid_room'], cardiacSurgeryLhh['laser_outlet'], cardiacSurgeryLhh['CardiacImagingSupportServiceOther'], cardiacSurgeryLhh['CardiacImplant'], cardiacSurgeryLhh['aortic_valve'], cardiacSurgeryLhh['atricure_clips'], cardiacSurgeryLhh['biomet'], cardiacSurgeryLhh['endovasular_stent_graft'], cardiacSurgeryLhh['gelweave_graft'], cardiacSurgeryLhh['kls'], cardiacSurgeryLhh['mitral_valve'], cardiacSurgeryLhh['mitral_ring_bend'],cardiacSurgeryLhh['pericardium_patch'],cardiacSurgeryLhh['tricuspid_valve_ring_bend'], cardiacSurgeryLhh['CardiacImplantOther'], cardiacSurgeryLhh['CardiacLabRequests'], cardiacSurgeryLhh['CardiacPathology'], cardiacSurgeryLhh['CardiacLabRequestsOther'], cardiacSurgeryLhh['CardiacPositioningDevices'], cardiacSurgeryLhh['bean_bag'], cardiacSurgeryLhh['CardiacPinkPad'], cardiacSurgeryLhh['CardiacPositioningDevicesOther'], cardiacSurgeryLhh['CardiacSupplies'], cardiacSurgeryLhh['bioglu'], cardiacSurgeryLhh['ballon_pump_50cc'], cardiacSurgeryLhh['coseal'], cardiacSurgeryLhh['hemopro'], cardiacSurgeryLhh['mital_clips_for_hybrid_case'], cardiacSurgeryLhh['proximal_anastomosis_device'], cardiacSurgeryLhh['tissel'], cardiacSurgeryLhh['vasoview'], cardiacSurgeryLhh['CardiacSuppliesOther'], cardiacSurgeryLhh['CardiacLoaners'], cardiacSurgeryLhh['CardiacLoanersVendor'], cardiacSurgeryLhh['CardiacTrayRequested']
                      )
        mysql_cursor.execute(
                                "INSERT INTO cardiacSurgeryLhh (serviceRequest_mongo_id, serviceRequestId, CardiacBiologicsTissue, cryo_aortic_valve, cryo_vein, CardiacBiologicsTissueOther, CardiacEquipment, acist_power_injector, cusa_xcel, harmonic, imaging_doppler_probe, laser_tmr, laser_spectranic, medtronic_atricure_cryoablation, maquet_hemopro_white_cord, xi_robot, CardiacEquipmentOther, CardiacImagingSupportService, hybrid_room, laser_outlet, CardiacImagingSupportServiceOther, CardiacImplant, aortic_valve, atricure_clips, biomet, endovasular_stent_graft, gelweave_graft, kls, mitral_valve, mitral_ring_bend, pericardium_patch, tricuspid_valve_ring_bend, CardiacImplantOther, CardiacLabRequests, CardiacPathology, CardiacLabRequestsOther, CardiacPositioningDevices, bean_bag, CardiacPinkPad, CardiacPositioningDevicesOther, CardiacSupplies, bioglu, ballon_pump_50cc, coseal, hemopro, mital_clips_for_hybrid_case, proximal_anastomosis_device, tissel, vasoview, CardiacSuppliesOther, CardiacLoaners, CardiacLoanersVendor, CardiacTrayRequested) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table cardiacSurgeryLhh")
        mysql_connection.commit()

def updatecardiacSurgeryLhh(mongo_id , serviceRequestId ,cardiacSurgeryLhh):
        print(f"Inside cardiacSurgeryLhh to update document in cardiacSurgeryLhh table with mongo_id - {mongo_id}")
        print(f"cardiacSurgeryLhh-{cardiacSurgeryLhh}")
        mysql_cursor.execute("UPDATE cardiacSurgeryLhh SET serviceRequestId = %s, CardiacBiologicsTissue = %s, cryo_aortic_valve = %s, cryo_vein = %s, CardiacBiologicsTissueOther = %s, CardiacEquipment = %s, acist_power_injector = %s, cusa_xcel = %s, harmonic = %s, imaging_doppler_probe = %s, laser_tmr = %s, laser_spectranic = %s, medtronic_atricure_cryoablation = %s, maquet_hemopro_white_cord = %s, xi_robot = %s, CardiacEquipmentOther = %s, CardiacImagingSupportService = %s, hybrid_room = %s, laser_outlet = %s, CardiacImagingSupportServiceOther = %s, CardiacImplant = %s, aortic_valve = %s, atricure_clips = %s, biomet = %s, endovasular_stent_graft = %s, gelweave_graft = %s, kls = %s, mitral_valve = %s, mitral_ring_bend = %s, pericardium_patch = %s, tricuspid_valve_ring_bend = %s, CardiacImplantOther = %s, CardiacLabRequests = %s, CardiacPathology = %s, CardiacLabRequestsOther = %s, CardiacPositioningDevices = %s, bean_bag = %s, CardiacPinkPad = %s, CardiacPositioningDevicesOther = %s, CardiacSupplies = %s, bioglu = %s, ballon_pump_50cc = %s, coseal = %s, hemopro = %s, mital_clips_for_hybrid_case = %s, proximal_anastomosis_device = %s, tissel = %s, vasoview = %s, CardiacSuppliesOther = %s, CardiacLoaners = %s, CardiacLoanersVendor = %s, CardiacTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, cardiacSurgeryLhh['CardiacBiologicsTissue'], cardiacSurgeryLhh['cryo_aortic_valve'], cardiacSurgeryLhh['cryo_vein'], cardiacSurgeryLhh['CardiacBiologicsTissueOther'], cardiacSurgeryLhh['CardiacEquipment'], cardiacSurgeryLhh['acist_power_injector'], cardiacSurgeryLhh['cusa_xcel'], cardiacSurgeryLhh['harmonic'], cardiacSurgeryLhh['imaging_doppler_probe'], cardiacSurgeryLhh['laser_tmr'], cardiacSurgeryLhh['laser_spectranic'], cardiacSurgeryLhh['medtronic_atricure_cryoablation'], cardiacSurgeryLhh['maquet_hemopro_white_cord'], cardiacSurgeryLhh['xi_robot'], cardiacSurgeryLhh['CardiacEquipmentOther'], cardiacSurgeryLhh['CardiacImagingSupportService'], cardiacSurgeryLhh['hybrid_room'], cardiacSurgeryLhh['laser_outlet'], cardiacSurgeryLhh['CardiacImagingSupportServiceOther'], cardiacSurgeryLhh['CardiacImplant'], cardiacSurgeryLhh['aortic_valve'], cardiacSurgeryLhh['atricure_clips'], cardiacSurgeryLhh['biomet'], cardiacSurgeryLhh['endovasular_stent_graft'], cardiacSurgeryLhh['gelweave_graft'], cardiacSurgeryLhh['kls'], cardiacSurgeryLhh['mitral_valve'], cardiacSurgeryLhh['mitral_ring_bend'],cardiacSurgeryLhh['pericardium_patch'],cardiacSurgeryLhh['tricuspid_valve_ring_bend'], cardiacSurgeryLhh['CardiacImplantOther'], cardiacSurgeryLhh['CardiacLabRequests'], cardiacSurgeryLhh['CardiacPathology'], cardiacSurgeryLhh['CardiacLabRequestsOther'], cardiacSurgeryLhh['CardiacPositioningDevices'], cardiacSurgeryLhh['bean_bag'], cardiacSurgeryLhh['CardiacPinkPad'], cardiacSurgeryLhh['CardiacPositioningDevicesOther'], cardiacSurgeryLhh['CardiacSupplies'], cardiacSurgeryLhh['bioglu'], cardiacSurgeryLhh['ballon_pump_50cc'], cardiacSurgeryLhh['coseal'], cardiacSurgeryLhh['hemopro'], cardiacSurgeryLhh['mital_clips_for_hybrid_case'], cardiacSurgeryLhh['proximal_anastomosis_device'], cardiacSurgeryLhh['tissel'], cardiacSurgeryLhh['vasoview'], cardiacSurgeryLhh['CardiacSuppliesOther'], cardiacSurgeryLhh['CardiacLoaners'], cardiacSurgeryLhh['CardiacLoanersVendor'], cardiacSurgeryLhh['CardiacTrayRequested'],mongo_id))
        print(f"Updated document in cardiacSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def insertENTLhh(mongo_id , serviceRequestId ,ENTLhh):
        print(f"Inside insertENTLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS ENTLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, ENTBiologicsTissue TEXT, ENTAlloderm TEXT, ENTAllodermThicknessSize TEXT, ENTInfuse TEXT, ENTInfuseSIze TEXT, ENTAllograftBone TEXT, ENTFrozenTissue TEXT, ENTNerveGraft TEXT, ENTBiologicsTissueOther TEXT, ENTEquipment TEXT, coblator_system TEXT, doppler_9_3 TEXT, fluid_warmer_ TEXT, ligasure_machi TEXT, medrobotic_equipment_ TEXT, micro_doppler TEXT, nim_machine_ TEXT, stortz_video_tower TEXT, stryker_ent_chair TEXT, stryker_navigation_ TEXT, stryker_video_tower TEXT, stryker_core_drill_saw TEXT, ENTthunderbeat_machine TEXT, zeiss_microscope TEXT, ENTLaser TEXT, ENTLaserDetail TEXT, ENTEquipmentOther TEXT, ENTImagingSupportService TEXT, ENTXRays TEXT, ENTImagingSupportServiceOther TEXT, ENTImplant TEXT, myringotomy_tubes TEXT, nerve_graft TEXT, prolaryngs_injection TEXT, sclera_graft TEXT, custom_mold TEXT, ENTCustomMoldVendorName TEXT, ENTPropel TEXT, ENTImplantOther TEXT, ENTLabRequests TEXT, ENTPathology TEXT, ENTENTLabRequestsOther TEXT, ENTPositioningDevices TEXT, ENTPositioningDevicesList_bean_bag TEXT, chest_rolls TEXT, donut TEXT, horshoe_shoe_mayfield_head_holder TEXT, lateral_arm_board TEXT, ENTPositioningDevicesOther TEXT, ENTSupplies TEXT, airway_balloon TEXT, inflation_device TEXT, sinus_balloon_ TEXT, ENTFeedingTube TEXT, ENTFeedingTubeSize TEXT, ENTTracheostomyTube TEXT, ENTTracheostomyTubeSize TEXT, ENTTracheostomyTubeType TEXT, ENTSuppliesOther TEXT, ENTMedication TEXT, bactrum_ointment TEXT, floxin_dropps_ TEXT, methylene_blue_ TEXT, ENTMedicationOther TEXT, ENTLoaners TEXT, ENTLoanersVendor TEXT, ENTTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, ENTLhh['ENTBiologicsTissue'], ENTLhh['ENTAlloderm'], ENTLhh['ENTAllodermThicknessSize'], ENTLhh['ENTInfuse'], ENTLhh['ENTInfuseSIze'], ENTLhh['ENTAllograftBone'], ENTLhh['ENTFrozenTissue'], ENTLhh['ENTNerveGraft'], ENTLhh['ENTBiologicsTissueOther'], ENTLhh['ENTEquipment'], ENTLhh['coblator_system'], ENTLhh['doppler_9_3'], ENTLhh['fluid_warmer_'], ENTLhh['ligasure_machine'], ENTLhh['medrobotic_equipment_'], ENTLhh['micro_doppler'], ENTLhh['nim_machine_'], ENTLhh['stortz_video_tower'], ENTLhh['stryker_ent_chair'], ENTLhh['stryker_navigation_'], ENTLhh['stryker_video_tower'], ENTLhh['stryker_core_drill_saw'], ENTLhh['ENTthunderbeat_machine'], ENTLhh['zeiss_microscope'], ENTLhh['ENTLaser'], ENTLhh['ENTLaserDetail'], ENTLhh['ENTEquipmentOther'], ENTLhh['ENTImagingSupportService'], ENTLhh['ENTXRays'], ENTLhh['ENTImagingSupportServiceOther'], ENTLhh['ENTImplant'], ENTLhh['myringotomy_tubes'], ENTLhh['nerve_graft'], ENTLhh['prolaryngs_injection'], ENTLhh['sclera_graft'], ENTLhh['ENTCustomMold'], ENTLhh['ENTCustomMoldVendorName'], ENTLhh['ENTPropel'], ENTLhh['ENTImplantOther'], ENTLhh['ENTLabRequests'], ENTLhh['ENTPathology'], ENTLhh['ENTENTLabRequestsOther'], ENTLhh['ENTPositioningDevices'], ENTLhh['bean_bag'], ENTLhh['chest_rolls'], ENTLhh['donut'], ENTLhh['horshoe_shoe_mayfield_head_holder'], ENTLhh['lateral_arm_board'], ENTLhh['ENTPositioningDevicesOther'], ENTLhh['ENTSupplies'], ENTLhh['airway_balloon'], ENTLhh['inflation_device'], ENTLhh['sinus_balloon_'], ENTLhh['ENTFeedingTube'], ENTLhh['ENTFeedingTubeSize'], ENTLhh['ENTTracheostomyTube'], ENTLhh['ENTTracheostomyTubeSize'], ENTLhh['ENTTracheostomyTubeType'], ENTLhh['ENTSuppliesOther'], ENTLhh['ENTMedication'], ENTLhh['bactrum_ointment'], ENTLhh['floxin_dropps_'], ENTLhh['methylene_blue_'], ENTLhh['ENTMedicationOther'], ENTLhh['ENTLoaners'], ENTLhh['ENTLoanersVendor'], ENTLhh['ENTTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO ENTLhh (serviceRequest_mongo_id, serviceRequestId, ENTBiologicsTissue, ENTAlloderm, ENTAllodermThicknessSize, ENTInfuse, ENTInfuseSIze, ENTAllograftBone, ENTFrozenTissue, ENTNerveGraft, ENTBiologicsTissueOther, ENTEquipment, coblator_system, doppler_9_3, fluid_warmer_, ligasure_machi, medrobotic_equipment_, micro_doppler, nim_machine_, stortz_video_tower, stryker_ent_chair, stryker_navigation_, stryker_video_tower, stryker_core_drill_saw, ENTthunderbeat_machine, zeiss_microscope, ENTLaser, ENTLaserDetail, ENTEquipmentOther, ENTImagingSupportService, ENTXRays, ENTImagingSupportServiceOther, ENTImplant, myringotomy_tubes, nerve_graft, prolaryngs_injection, sclera_graft, custom_mold, ENTCustomMoldVendorName, ENTPropel, ENTImplantOther, ENTLabRequests, ENTPathology, ENTENTLabRequestsOther, ENTPositioningDevices, ENTPositioningDevicesList_bean_bag, chest_rolls, donut, horshoe_shoe_mayfield_head_holder, lateral_arm_board, ENTPositioningDevicesOther, ENTSupplies, airway_balloon, inflation_device, sinus_balloon_, ENTFeedingTube, ENTFeedingTubeSize, ENTTracheostomyTube, ENTTracheostomyTubeSize, ENTTracheostomyTubeType, ENTSuppliesOther, ENTMedication, bactrum_ointment, floxin_dropps_, methylene_blue_, ENTMedicationOther, ENTLoaners, ENTLoanersVendor, ENTTrayRequested) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table ENTLhh")
        mysql_connection.commit()

def updateENTLhh(mongo_id , serviceRequestId ,ENTLhh):
        print(f"Inside ENTLhh to update document in ENTLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE ENTLhh SET serviceRequestId = %s, ENTBiologicsTissue = %s, ENTAlloderm = %s, ENTAllodermThicknessSize = %s, ENTInfuse = %s, ENTInfuseSIze = %s, ENTAllograftBone = %s, ENTFrozenTissue = %s, ENTNerveGraft = %s, ENTBiologicsTissueOther = %s, ENTEquipment = %s, coblator_system = %s, doppler_9_3 = %s, fluid_warmer_ = %s, ligasure_machi = %s, medrobotic_equipment_ = %s, micro_doppler = %s, nim_machine_ = %s, stortz_video_tower = %s, stryker_ent_chair = %s, stryker_navigation_ = %s, stryker_video_tower = %s, stryker_core_drill_saw = %s, ENTthunderbeat_machine = %s, zeiss_microscope = %s, ENTLaser = %s, ENTLaserDetail = %s, ENTEquipmentOther = %s, ENTImagingSupportService = %s, ENTXRays = %s, ENTImagingSupportServiceOther = %s, ENTImplant = %s, myringotomy_tubes = %s, nerve_graft = %s, prolaryngs_injection = %s, sclera_graft = %s, custom_mold = %s, ENTCustomMoldVendorName = %s, ENTPropel = %s, ENTImplantOther = %s, ENTLabRequests = %s, ENTPathology = %s, ENTENTLabRequestsOther = %s, ENTPositioningDevices = %s, ENTPositioningDevicesList_bean_bag = %s, chest_rolls = %s, donut = %s, horshoe_shoe_mayfield_head_holder = %s, lateral_arm_board = %s, ENTPositioningDevicesOther = %s, ENTSupplies = %s, airway_balloon = %s, inflation_device = %s, sinus_balloon_ = %s, ENTFeedingTube = %s, ENTFeedingTubeSize = %s, ENTTracheostomyTube = %s, ENTTracheostomyTubeSize = %s, ENTTracheostomyTubeType = %s, ENTSuppliesOther = %s, ENTMedication = %s, bactrum_ointment = %s, floxin_dropps_ = %s, methylene_blue_ = %s, ENTMedicationOther = %s, ENTLoaners = %s, ENTLoanersVendor = %s, ENTTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, ENTLhh['ENTBiologicsTissue'], ENTLhh['ENTAlloderm'], ENTLhh['ENTAllodermThicknessSize'], ENTLhh['ENTInfuse'], ENTLhh['ENTInfuseSIze'], ENTLhh['ENTAllograftBone'], ENTLhh['ENTFrozenTissue'], ENTLhh['ENTNerveGraft'], ENTLhh['ENTBiologicsTissueOther'], ENTLhh['ENTEquipment'], ENTLhh['coblator_system'], ENTLhh['doppler_9_3'], ENTLhh['fluid_warmer_'], ENTLhh['ligasure_machine'], ENTLhh['medrobotic_equipment_'], ENTLhh['micro_doppler'], ENTLhh['nim_machine_'], ENTLhh['stortz_video_tower'], ENTLhh['stryker_ent_chair'], ENTLhh['stryker_navigation_'], ENTLhh['stryker_video_tower'], ENTLhh['stryker_core_drill_saw'], ENTLhh['ENTthunderbeat_machine'], ENTLhh['zeiss_microscope'], ENTLhh['ENTLaser'], ENTLhh['ENTLaserDetail'], ENTLhh['ENTEquipmentOther'], ENTLhh['ENTImagingSupportService'], ENTLhh['ENTXRays'], ENTLhh['ENTImagingSupportServiceOther'], ENTLhh['ENTImplant'], ENTLhh['myringotomy_tubes'], ENTLhh['nerve_graft'], ENTLhh['prolaryngs_injection'], ENTLhh['sclera_graft'], ENTLhh['ENTCustomMold'], ENTLhh['ENTCustomMoldVendorName'], ENTLhh['ENTPropel'], ENTLhh['ENTImplantOther'], ENTLhh['ENTLabRequests'], ENTLhh['ENTPathology'], ENTLhh['ENTENTLabRequestsOther'], ENTLhh['ENTPositioningDevices'], ENTLhh['bean_bag'], ENTLhh['chest_rolls'], ENTLhh['donut'], ENTLhh['horshoe_shoe_mayfield_head_holder'], ENTLhh['lateral_arm_board'], ENTLhh['ENTPositioningDevicesOther'], ENTLhh['ENTSupplies'], ENTLhh['airway_balloon'], ENTLhh['inflation_device'], ENTLhh['sinus_balloon_'], ENTLhh['ENTFeedingTube'], ENTLhh['ENTFeedingTubeSize'], ENTLhh['ENTTracheostomyTube'], ENTLhh['ENTTracheostomyTubeSize'], ENTLhh['ENTTracheostomyTubeType'], ENTLhh['ENTSuppliesOther'], ENTLhh['ENTMedication'], ENTLhh['bactrum_ointment'], ENTLhh['floxin_dropps_'], ENTLhh['methylene_blue_'], ENTLhh['ENTMedicationOther'], ENTLhh['ENTLoaners'], ENTLhh['ENTLoanersVendor'], ENTLhh['ENTTrayRequested'],mongo_id))
        print(f"Updated document in ENTLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def insertgeneralSurgeryLhh(mongo_id , serviceRequestId ,generalSurgeryLhh):
        print(f"Inside insertgeneralSurgeryLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS generalSurgeryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, GeneralBiologicsTissue TEXT, GeneralTisseel TEXT, GeneralMesh TEXT, GeneralVendorType TEXT, GeneralBiologicsTissueSize TEXT, GeneralEquipment TEXT, aim_scope TEXT, colonoscope TEXT, conmed_argon_beam TEXT, conmed_air_seal TEXT, cusa_machine TEXT, erbe TEXT, footboard TEXT, gastroscope TEXT, harmonic_machine TEXT, headlight TEXT, imprint_machine TEXT, irrigation_warmer TEXT, laproscopic_irrigation TEXT, Generalligasure_machine TEXT, olympus__tower TEXT, purple_navigator TEXT, rita_machine TEXT, saviscout_machine TEXT, sigmoidoscope TEXT, smoke_evacuator TEXT, sorin_cell_saver TEXT, spy_machine TEXT, Generalthunderbeat_machine TEXT, weighing_scale TEXT, wedge_positioner TEXT, GeneralCholangiogram TEXT, GeneralCholangiogramSpecify TEXT, GeneralUltrasound TEXT, GeneralXIRobot TEXT, GeneralEquipmentOthers TEXT, GeneralImagingSupportServices TEXT, GeneralXRays TEXT, GeneralImagingSupportServicesOthers TEXT, GeneralLasersSpecify TEXT, GeneralImplants TEXT, GeneralImplantType TEXT, GeneralName TEXT, GeneralImplantsSizeQuality TEXT, GeneralImplantsVendorPartNo TEXT, GeneralInstrumentation TEXT, GeneralKindOfColonoscope TEXT, GeneralKindOfColonoscopeSpecify TEXT, GeneralNeededRetractor TEXT, GeneralNeededRetractorSpecify TEXT, GeneralSpecialtyTray TEXT, GeneralSpecialtyTraySpecify TEXT, GeneralUltrasoundProbe TEXT, GeneralUltrasoundProbeSpecify TEXT, GeneralLabRequests TEXT, GeneralCytology TEXT, GeneralMicrobiology TEXT, GeneralIndicateNecessaryStudy TEXT, GeneralIOPTH TEXT, GeneralPathologyy TEXT, GeneralPositioningDevices TEXT, Generalallen_stirrups_with_clamps TEXT, axillary_roll TEXT, bean_bag TEXT, gel_rolls TEXT, horse_shoe_head_rest TEXT, robotic_bed TEXT, regular_bed TEXT, spleen_wedge TEXT, split_leg TEXT, vascular_bed TEXT, GeneralPatientPosition TEXT, GeneralLateral TEXT, GeneralPositioningDevicesOther TEXT, GeneralSuture TEXT, GeneralSpecialSutures TEXT, GeneralSizeAndDetails TEXT, GeneralMedication TEXT, exparel TEXT, ic_green TEXT, Generalmethylene_blue TEXT, GeneralLocalSpecify TEXT, GeneralContrast TEXT, GeneralMedicationOther TEXT, GeneralLoaners TEXT, GeneralLoanersVendor TEXT, GeneralTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, generalSurgeryLhh['GeneralBiologicsTissue'], generalSurgeryLhh['GeneralTisseel'], generalSurgeryLhh['GeneralMesh'], generalSurgeryLhh['GeneralVendorType'], generalSurgeryLhh['GeneralBiologicsTissueSize'], generalSurgeryLhh['GeneralEquipment'], generalSurgeryLhh['aim_scope'], generalSurgeryLhh['colonoscope'], generalSurgeryLhh['conmed_argon_beam'], generalSurgeryLhh['conmed_air_seal'], generalSurgeryLhh['cusa_machine'], generalSurgeryLhh['erbe'], generalSurgeryLhh['footboard'], generalSurgeryLhh['gastroscope'], generalSurgeryLhh['harmonic_machine'], generalSurgeryLhh['headlight'], generalSurgeryLhh['imprint_machine'], generalSurgeryLhh['irrigation_warmer'], generalSurgeryLhh['laproscopic_irrigation'], generalSurgeryLhh['Generalligasure_machine'], generalSurgeryLhh['olympus__tower'], generalSurgeryLhh['purple_navigator'], generalSurgeryLhh['rita_machine'], generalSurgeryLhh['saviscout_machine'], generalSurgeryLhh['sigmoidoscope'], generalSurgeryLhh['smoke_evacuator'], generalSurgeryLhh['sorin_cell_saver'], generalSurgeryLhh['spy_machine'], generalSurgeryLhh['Generalthunderbeat_machine'], generalSurgeryLhh['weighing_scale'], generalSurgeryLhh['wedge_positioner'], generalSurgeryLhh['GeneralCholangiogram'], generalSurgeryLhh['GeneralCholangiogramSpecify'], generalSurgeryLhh['GeneralUltrasound'], generalSurgeryLhh['GeneralXIRobot'], generalSurgeryLhh['GeneralEquipmentOthers'], generalSurgeryLhh['GeneralImagingSupportServices'], generalSurgeryLhh['GeneralXRays'], generalSurgeryLhh['GeneralImagingSupportServicesOthers'], generalSurgeryLhh['GeneralLasersSpecify'], generalSurgeryLhh['GeneralImplants'], generalSurgeryLhh['GeneralImplantType'], generalSurgeryLhh['GeneralName'], generalSurgeryLhh['GeneralImplantsSizeQuality'], generalSurgeryLhh['GeneralImplantsVendorPartNo'], generalSurgeryLhh['GeneralInstrumentation'], generalSurgeryLhh['GeneralKindOfColonoscope'], generalSurgeryLhh['GeneralKindOfColonoscopeSpecify'], generalSurgeryLhh['GeneralNeededRetractor'], generalSurgeryLhh['GeneralNeededRetractorSpecify'], generalSurgeryLhh['GeneralSpecialtyTray'], generalSurgeryLhh['GeneralSpecialtyTraySpecify'], generalSurgeryLhh['GeneralUltrasoundProbe'], generalSurgeryLhh['GeneralUltrasoundProbeSpecify'],generalSurgeryLhh['GeneralLabRequests'], generalSurgeryLhh['GeneralCytology'], generalSurgeryLhh['GeneralMicrobiology'], generalSurgeryLhh['GeneralIndicateNecessaryStudy'], generalSurgeryLhh['GeneralIOPTH'], generalSurgeryLhh['GeneralPathologyy'], generalSurgeryLhh['GeneralPositioningDevices'], generalSurgeryLhh['Generalallen_stirrups_with_clamps'], generalSurgeryLhh['axillary_roll'], generalSurgeryLhh['bean_bag'], generalSurgeryLhh['gel_rolls'], generalSurgeryLhh['horse_shoe_head_rest'], generalSurgeryLhh['robotic_bed'], generalSurgeryLhh['regular_bed'], generalSurgeryLhh['spleen_wedge'], generalSurgeryLhh['split_leg'], generalSurgeryLhh['vascular_bed'], generalSurgeryLhh['GeneralPatientPosition'], generalSurgeryLhh['GeneralLateral'], generalSurgeryLhh['GeneralPositioningDevicesOther'], generalSurgeryLhh['GeneralSuture'], generalSurgeryLhh['GeneralSpecialSutures'], generalSurgeryLhh['GeneralSizeAndDetails'], generalSurgeryLhh['GeneralMedication'], generalSurgeryLhh['exparel'], generalSurgeryLhh['ic_green'], generalSurgeryLhh['Generalmethylene_blue'], generalSurgeryLhh['GeneralLocalSpecify'], generalSurgeryLhh['GeneralContrast'], generalSurgeryLhh['GeneralMedicationOther'], generalSurgeryLhh['GeneralLoaners'], generalSurgeryLhh['GeneralLoanersVendor'], generalSurgeryLhh['GeneralTrayRequested']
                      )
        mysql_cursor.execute(
                                "INSERT INTO generalSurgeryLhh (serviceRequest_mongo_id, serviceRequestId, GeneralBiologicsTissue,GeneralTisseel,GeneralMesh,GeneralVendorType,GeneralBiologicsTissueSize,GeneralEquipment,aim_scope,colonoscope,conmed_argon_beam,conmed_air_seal,cusa_machine,erbe,footboard,gastroscope,harmonic_machine,headlight,imprint_machine,irrigation_warmer,laproscopic_irrigation,Generalligasure_machine,olympus__tower,purple_navigator,rita_machine,saviscout_machine,sigmoidoscope,smoke_evacuator,sorin_cell_saver,spy_machine,Generalthunderbeat_machine,weighing_scale,wedge_positioner,GeneralCholangiogram,GeneralCholangiogramSpecify,GeneralUltrasound,GeneralXIRobot,GeneralEquipmentOthers,GeneralImagingSupportServices,GeneralXRays,GeneralImagingSupportServicesOthers,GeneralLasersSpecify,GeneralImplants,GeneralImplantType,GeneralName,GeneralImplantsSizeQuality,GeneralImplantsVendorPartNo,GeneralInstrumentation,GeneralKindOfColonoscope,GeneralKindOfColonoscopeSpecify,GeneralNeededRetractor,GeneralNeededRetractorSpecify,GeneralSpecialtyTray,GeneralSpecialtyTraySpecify,GeneralUltrasoundProbe,GeneralUltrasoundProbeSpecify,GeneralLabRequests,GeneralCytology,GeneralMicrobiology,GeneralIndicateNecessaryStudy,GeneralIOPTH,GeneralPathologyy,GeneralPositioningDevices,Generalallen_stirrups_with_clamps,axillary_roll,bean_bag,gel_rolls,horse_shoe_head_rest,robotic_bed,regular_bed,spleen_wedge,split_leg,vascular_bed,GeneralPatientPosition,GeneralLateral,GeneralPositioningDevicesOther,GeneralSuture,GeneralSpecialSutures,GeneralSizeAndDetails,GeneralMedication,exparel,ic_green,Generalmethylene_blue,GeneralLocalSpecify,GeneralContrast,GeneralMedicationOther,GeneralLoaners,GeneralLoanersVendor,GeneralTrayRequested) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table generalSurgeryLhh")
        mysql_connection.commit()

def updategeneralSurgeryLhh(mongo_id , serviceRequestId ,generalSurgeryLhh):
        print(f"Inside ENTLhh to update document in generalSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE generalSurgeryLhh SET serviceRequestId = %s,GeneralBiologicsTissue = %s,GeneralTisseel = %s,GeneralMesh = %s,GeneralVendorType = %s,GeneralBiologicsTissueSize = %s,GeneralEquipment = %s,aim_scope = %s,colonoscope = %s,conmed_argon_beam = %s,conmed_air_seal = %s,cusa_machine = %s,erbe = %s,footboard = %s,gastroscope = %s,harmonic_machine = %s,headlight = %s,imprint_machine = %s,irrigation_warmer = %s,laproscopic_irrigation = %s,Generalligasure_machine = %s,olympus__tower = %s,purple_navigator = %s,rita_machine = %s,saviscout_machine = %s,sigmoidoscope = %s,smoke_evacuator = %s,sorin_cell_saver = %s,spy_machine = %s,Generalthunderbeat_machine = %s,weighing_scale = %s,wedge_positioner = %s,GeneralCholangiogram = %s,GeneralCholangiogramSpecify = %s,GeneralUltrasound = %s,GeneralXIRobot = %s,GeneralEquipmentOthers = %s,GeneralImagingSupportServices = %s,GeneralXRays = %s,GeneralImagingSupportServicesOthers = %s,GeneralLasersSpecify = %s,GeneralImplants = %s,GeneralImplantType = %s,GeneralName = %s,GeneralImplantsSizeQuality = %s,GeneralImplantsVendorPartNo = %s,GeneralInstrumentation = %s,GeneralKindOfColonoscope = %s,GeneralKindOfColonoscopeSpecify = %s,GeneralNeededRetractor = %s,GeneralNeededRetractorSpecify = %s,GeneralSpecialtyTray = %s,GeneralSpecialtyTraySpecify = %s,GeneralUltrasoundProbe = %s,GeneralUltrasoundProbeSpecify = %s,GeneralLabRequests = %s,GeneralCytology = %s,GeneralMicrobiology = %s,GeneralIndicateNecessaryStudy = %s,GeneralIOPTH = %s,GeneralPathologyy = %s,GeneralPositioningDevices = %s,Generalallen_stirrups_with_clamps = %s,axillary_roll = %s,bean_bag = %s,gel_rolls = %s,horse_shoe_head_rest = %s,robotic_bed = %s,regular_bed = %s,spleen_wedge = %s,split_leg = %s,vascular_bed = %s,GeneralPatientPosition = %s,GeneralLateral = %s,GeneralPositioningDevicesOther = %s,GeneralSuture = %s,GeneralSpecialSutures = %s,GeneralSizeAndDetails = %s,GeneralMedication = %s,exparel = %s,ic_green = %s,Generalmethylene_blue = %s,GeneralLocalSpecify = %s,GeneralContrast = %s,GeneralMedicationOther = %s,GeneralLoaners = %s,GeneralLoanersVendor = %s,GeneralTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, generalSurgeryLhh['GeneralBiologicsTissue'], generalSurgeryLhh['GeneralTisseel'], generalSurgeryLhh['GeneralMesh'], generalSurgeryLhh['GeneralVendorType'], generalSurgeryLhh['GeneralBiologicsTissueSize'], generalSurgeryLhh['GeneralEquipment'], generalSurgeryLhh['aim_scope'], generalSurgeryLhh['colonoscope'], generalSurgeryLhh['conmed_argon_beam'], generalSurgeryLhh['conmed_air_seal'], generalSurgeryLhh['cusa_machine'], generalSurgeryLhh['erbe'], generalSurgeryLhh['footboard'], generalSurgeryLhh['gastroscope'], generalSurgeryLhh['harmonic_machine'], generalSurgeryLhh['headlight'], generalSurgeryLhh['imprint_machine'], generalSurgeryLhh['irrigation_warmer'], generalSurgeryLhh['laproscopic_irrigation'], generalSurgeryLhh['Generalligasure_machine'], generalSurgeryLhh['olympus__tower'], generalSurgeryLhh['purple_navigator'], generalSurgeryLhh['rita_machine'], generalSurgeryLhh['saviscout_machine'], generalSurgeryLhh['sigmoidoscope'], generalSurgeryLhh['smoke_evacuator'], generalSurgeryLhh['sorin_cell_saver'], generalSurgeryLhh['spy_machine'], generalSurgeryLhh['Generalthunderbeat_machine'], generalSurgeryLhh['weighing_scale'], generalSurgeryLhh['wedge_positioner'], generalSurgeryLhh['GeneralCholangiogram'], generalSurgeryLhh['GeneralCholangiogramSpecify'], generalSurgeryLhh['GeneralUltrasound'], generalSurgeryLhh['GeneralXIRobot'], generalSurgeryLhh['GeneralEquipmentOthers'], generalSurgeryLhh['GeneralImagingSupportServices'], generalSurgeryLhh['GeneralXRays'], generalSurgeryLhh['GeneralImagingSupportServicesOthers'], generalSurgeryLhh['GeneralLasersSpecify'], generalSurgeryLhh['GeneralImplants'], generalSurgeryLhh['GeneralImplantType'], generalSurgeryLhh['GeneralName'], generalSurgeryLhh['GeneralImplantsSizeQuality'], generalSurgeryLhh['GeneralImplantsVendorPartNo'], generalSurgeryLhh['GeneralInstrumentation'], generalSurgeryLhh['GeneralKindOfColonoscope'], generalSurgeryLhh['GeneralKindOfColonoscopeSpecify'], generalSurgeryLhh['GeneralNeededRetractor'], generalSurgeryLhh['GeneralNeededRetractorSpecify'], generalSurgeryLhh['GeneralSpecialtyTray'], generalSurgeryLhh['GeneralSpecialtyTraySpecify'], generalSurgeryLhh['GeneralUltrasoundProbe'], generalSurgeryLhh['GeneralUltrasoundProbeSpecify'],generalSurgeryLhh['GeneralLabRequests'], generalSurgeryLhh['GeneralCytology'], generalSurgeryLhh['GeneralMicrobiology'], generalSurgeryLhh['GeneralIndicateNecessaryStudy'], generalSurgeryLhh['GeneralIOPTH'], generalSurgeryLhh['GeneralPathologyy'], generalSurgeryLhh['GeneralPositioningDevices'], generalSurgeryLhh['Generalallen_stirrups_with_clamps'], generalSurgeryLhh['axillary_roll'], generalSurgeryLhh['bean_bag'], generalSurgeryLhh['gel_rolls'], generalSurgeryLhh['horse_shoe_head_rest'], generalSurgeryLhh['robotic_bed'], generalSurgeryLhh['regular_bed'], generalSurgeryLhh['spleen_wedge'], generalSurgeryLhh['split_leg'], generalSurgeryLhh['vascular_bed'], generalSurgeryLhh['GeneralPatientPosition'], generalSurgeryLhh['GeneralLateral'], generalSurgeryLhh['GeneralPositioningDevicesOther'], generalSurgeryLhh['GeneralSuture'], generalSurgeryLhh['GeneralSpecialSutures'], generalSurgeryLhh['GeneralSizeAndDetails'], generalSurgeryLhh['GeneralMedication'], generalSurgeryLhh['exparel'], generalSurgeryLhh['ic_green'], generalSurgeryLhh['Generalmethylene_blue'], generalSurgeryLhh['GeneralLocalSpecify'], generalSurgeryLhh['GeneralContrast'], generalSurgeryLhh['GeneralMedicationOther'], generalSurgeryLhh['GeneralLoaners'], generalSurgeryLhh['GeneralLoanersVendor'], generalSurgeryLhh['GeneralTrayRequested'],mongo_id))
        print(f"Updated document in generalSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()



def insertgenitourinaryLhh(mongo_id , serviceRequestId ,genitourinaryLhh):
        print(f"Inside insertgenitourinaryLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS genitourinaryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT, GenitourinaryBiologicTissue TEXT, GenitourinaryAlloderm TEXT, GenitourinaryAllodermThicknessSize TEXT, GenitourinaryEquipment TEXT, allen_fluid_pole TEXT, bk_medical_flex_focus_800_utz TEXT, boston_sci_lithovue TEXT, conmed_argon_beam TEXT, conmed_air_seal TEXT, Genitourinary_greenlight_laser TEXT, Genitourinary_holmium_laser TEXT, Genitourinary_ligasure_machine TEXT, Genitourinary_olympus_bipolar_resectoscope TEXT, olympus_digital_scope_tower TEXT, olympus_shockpulse_se_machine TEXT, or_solutoons_hush_slush_ice_slush TEXT, stryker_neptune_suction_machine TEXT, sorin_cell_saver TEXT, stryker_monitor TEXT, xi_robot_right_docking_left_docking TEXT, Genitourinary_zeiss_microscope TEXT, m_ranger_irrigation_fluid_warmer TEXT, GenitourinaryImagingSupportService TEXT, GenitourinaryXRays TEXT, GenitourinaryImagingSupportServiceOther TEXT, GenitourinaryImplants TEXT, GenitourinaryAMSPosition TEXT, GenitourinaryAMSVendor TEXT, GenitourinaryAMSLength TEXT, GenitourinaryAMSRTESize TEXT, GenitourinaryColoplastPosition TEXT, GenitourinaryColoplastType TEXT, GenitourinaryColoplastSize TEXT, GenitourinaryGynecareTVTO TEXT, GenitourinaryUreteralStent TEXT, GenitourinaryInstrumentation TEXT, boston_sci_single_use_digital_flexible_ureteroscope TEXT, bk_rectal_probe TEXT, cystoscopy_set TEXT, da_vinci_xi_basic_instruments TEXT, gu_miscellaneous_tray TEXT, gu_laparoscopic_tray_and_accessories TEXT, gu_robotic_tray_and_accessories TEXT, ipp_tray_formerly_dr__eids_tray TEXT, olympus_digital_ureteroscope TEXT, Genitourinaryolympus_bipolar_resectoscope TEXT, olympus_shockpulse_lithotripsy_set TEXT, percutaneous_nephrolithotomy_set TEXT, semi_rigid_ureteroscope TEXT, GenitourinaryNephroscope TEXT, GenitourinaryDaVinciXIScope TEXT, GenitourinaryDaVinciXIScopeSpecify TEXT, GenitourinaryLabRequests TEXT, GenitourinaryPathology TEXT, GenitourinaryPositioningDevices TEXT, Genitourinary_allen_stirrups_with_clamps TEXT, Genitourinary_axillary_roll TEXT, Genitourinary_gel_rolls TEXT, GenitourinaryGUBed TEXT, GenitourinarySupplies TEXT, fr_5_open_ended_catheter TEXT, dual_lumen_catheter TEXT, m_ranger_irrigation_wamng_system TEXT, piranha_3f_flexible TEXT, GenitourinaryStaples TEXT, GenitourinaryStaplesSize TEXT, GenitourinaryWires TEXT, GenitourinaryWiresOther TEXT, GenitourinaryHemostaticAgent TEXT, GenitourinaryHemostaticAgentOther TEXT, GenitourinaryUroMaxNephromax TEXT, GenitourinaryLASERFiber TEXT, GenitourinaryUreteralBasket TEXT, GenitourinarySpecialtyTrocar TEXT, GenitourinarySuppliesOther TEXT, GenitourinarySuture TEXT, GenitourinaryVLok TEXT, GenitourinaryVLokSize TEXT, GenitourinaryStratafix TEXT, GenitourinaryStratafixSize TEXT, GenitourinaryQuil TEXT, GenitourinaryQuilSize TEXT, GenitourinarySutureOther TEXT, GenitourinaryMedications TEXT, b_and_o TEXT, Genitourinaryic_green TEXT, Genitourinarymethylene_blue TEXT, omipaque TEXT, urojet TEXT, GenitourinaryMedicationsOther TEXT, GenitourinaryLoaners TEXT, GenitourinaryLoaners_value TEXT, GenitourinaryTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, genitourinaryLhh['GenitourinaryBiologicTissue'], genitourinaryLhh['GenitourinaryAlloderm'], genitourinaryLhh['GenitourinaryAllodermThicknessSize'], genitourinaryLhh['GenitourinaryEquipment'], genitourinaryLhh['allen_fluid_pole'], genitourinaryLhh['bk_medical_flex_focus_800_utz'], genitourinaryLhh['boston_sci_lithovue'], genitourinaryLhh['conmed_argon_beam'], genitourinaryLhh['conmed_air_seal'], genitourinaryLhh['Genitourinary_greenlight_laser'], genitourinaryLhh['Genitourinary_holmium_laser'], genitourinaryLhh['Genitourinary_ligasure_machine'], genitourinaryLhh['Genitourinary_olympus_bipolar_resectoscope'], genitourinaryLhh['olympus_digital_scope_tower'], genitourinaryLhh['olympus_shockpulse_se_machine'], genitourinaryLhh['or_solutoons_hush_slush_ice_slush'], genitourinaryLhh['stryker_neptune_suction_machine'], genitourinaryLhh['sorin_cell_saver'], genitourinaryLhh['stryker_monitor'], genitourinaryLhh['xi_robot_right_docking_left_docking'], genitourinaryLhh['Genitourinary_zeiss_microscope'], genitourinaryLhh['m_ranger_irrigation_fluid_warmer'], genitourinaryLhh['GenitourinaryImagingSupportService'], genitourinaryLhh['GenitourinaryXRays'], genitourinaryLhh['GenitourinaryImagingSupportServiceOther'], genitourinaryLhh['GenitourinaryImplants'], genitourinaryLhh['GenitourinaryAMSPosition'], genitourinaryLhh['GenitourinaryAMSVendor'], genitourinaryLhh['GenitourinaryAMSLength'], genitourinaryLhh['GenitourinaryAMSRTESize'],genitourinaryLhh['GenitourinaryColoplastPosition'], genitourinaryLhh['GenitourinaryColoplastType'], genitourinaryLhh['GenitourinaryColoplastSize'], genitourinaryLhh['GenitourinaryGynecareTVTO'], genitourinaryLhh['GenitourinaryUreteralStent'], genitourinaryLhh['GenitourinaryInstrumentation'], genitourinaryLhh['boston_sci_single_use_digital_flexible_ureteroscope'], genitourinaryLhh['bk_rectal_probe'], genitourinaryLhh['cystoscopy_set'], genitourinaryLhh['da_vinci_xi_basic_instruments'], genitourinaryLhh['gu_miscellaneous_tray'], genitourinaryLhh['gu_laparoscopic_tray_and_accessories'], genitourinaryLhh['gu_robotic_tray_and_accessories'], genitourinaryLhh['ipp_tray_formerly_dr__eids_tray'], genitourinaryLhh['olympus_digital_ureteroscope'], genitourinaryLhh['Genitourinaryolympus_bipolar_resectoscope'], genitourinaryLhh['olympus_shockpulse_lithotripsy_set'], genitourinaryLhh['percutaneous_nephrolithotomy_set'], genitourinaryLhh['semi_rigid_ureteroscope'], genitourinaryLhh['GenitourinaryNephroscope'], genitourinaryLhh['GenitourinaryDaVinciXIScope'], genitourinaryLhh['GenitourinaryDaVinciXIScopeSpecify'], genitourinaryLhh['GenitourinaryLabRequests'], genitourinaryLhh['GenitourinaryPathology'], genitourinaryLhh['GenitourinaryPositioningDevices'], genitourinaryLhh['Genitourinary_allen_stirrups_with_clamps'], genitourinaryLhh['Genitourinary_axillary_roll'], genitourinaryLhh['Genitourinary_gel_rolls'], genitourinaryLhh['GenitourinaryGUBed'], genitourinaryLhh['GenitourinarySupplies'], genitourinaryLhh['fr_5_open_ended_catheter'], genitourinaryLhh['dual_lumen_catheter'], genitourinaryLhh['m_ranger_irrigation_wamng_system'], genitourinaryLhh['piranha_3f_flexible'], genitourinaryLhh['GenitourinaryStaples'], genitourinaryLhh['GenitourinaryStaplesSize'], genitourinaryLhh['GenitourinaryWires'], genitourinaryLhh['GenitourinaryWiresOther'], genitourinaryLhh['GenitourinaryHemostaticAgent'], genitourinaryLhh['GenitourinaryHemostaticAgentOther'], genitourinaryLhh['GenitourinaryUroMaxNephromax'], genitourinaryLhh['GenitourinaryLASERFiber'], genitourinaryLhh['GenitourinaryUreteralBasket'], genitourinaryLhh['GenitourinarySpecialtyTrocar'], genitourinaryLhh['GenitourinarySuppliesOther'], genitourinaryLhh['GenitourinarySuture'], genitourinaryLhh['GenitourinaryVLok'], genitourinaryLhh['GenitourinaryVLokSize'], genitourinaryLhh['GenitourinaryStratafix'], genitourinaryLhh['GenitourinaryStratafixSize'], genitourinaryLhh['GenitourinaryQuil'], genitourinaryLhh['GenitourinaryQuilSize'], genitourinaryLhh['GenitourinarySutureOther'], genitourinaryLhh['GenitourinaryMedications'], genitourinaryLhh['b_and_o'], genitourinaryLhh['ic_green'], genitourinaryLhh['Genitourinarymethylene_blue'], genitourinaryLhh['omipaque'], genitourinaryLhh['urojet'], genitourinaryLhh['GenitourinaryMedicationsOther'], genitourinaryLhh['GenitourinaryLoaners'], genitourinaryLhh['GenitourinaryLoaners_value'], genitourinaryLhh['GenitourinaryTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO genitourinaryLhh (serviceRequest_mongo_id, serviceRequestId, GenitourinaryBiologicTissue, GenitourinaryAlloderm, GenitourinaryAllodermThicknessSize, GenitourinaryEquipment, allen_fluid_pole, bk_medical_flex_focus_800_utz, boston_sci_lithovue, conmed_argon_beam, conmed_air_seal, Genitourinary_greenlight_laser, Genitourinary_holmium_laser, Genitourinary_ligasure_machine, Genitourinary_olympus_bipolar_resectoscope, olympus_digital_scope_tower, olympus_shockpulse_se_machine, or_solutoons_hush_slush_ice_slush, stryker_neptune_suction_machine, sorin_cell_saver, stryker_monitor, xi_robot_right_docking_left_docking, Genitourinary_zeiss_microscope, m_ranger_irrigation_fluid_warmer, GenitourinaryImagingSupportService, GenitourinaryXRays, GenitourinaryImagingSupportServiceOther, GenitourinaryImplants, GenitourinaryAMSPosition, GenitourinaryAMSVendor, GenitourinaryAMSLength, GenitourinaryAMSRTESize, GenitourinaryColoplastPosition, GenitourinaryColoplastType, GenitourinaryColoplastSize, GenitourinaryGynecareTVTO, GenitourinaryUreteralStent, GenitourinaryInstrumentation, boston_sci_single_use_digital_flexible_ureteroscope, bk_rectal_probe, cystoscopy_set, da_vinci_xi_basic_instruments, gu_miscellaneous_tray, gu_laparoscopic_tray_and_accessories, gu_robotic_tray_and_accessories, ipp_tray_formerly_dr__eids_tray, olympus_digital_ureteroscope, Genitourinaryolympus_bipolar_resectoscope, olympus_shockpulse_lithotripsy_set, percutaneous_nephrolithotomy_set, semi_rigid_ureteroscope, GenitourinaryNephroscope, GenitourinaryDaVinciXIScope, GenitourinaryDaVinciXIScopeSpecify, GenitourinaryLabRequests, GenitourinaryPathology, GenitourinaryPositioningDevices, Genitourinary_allen_stirrups_with_clamps, Genitourinary_axillary_roll, Genitourinary_gel_rolls, GenitourinaryGUBed, GenitourinarySupplies, fr_5_open_ended_catheter, dual_lumen_catheter, m_ranger_irrigation_wamng_system, piranha_3f_flexible, GenitourinaryStaples, GenitourinaryStaplesSize, GenitourinaryWires, GenitourinaryWiresOther, GenitourinaryHemostaticAgent, GenitourinaryHemostaticAgentOther, GenitourinaryUroMaxNephromax, GenitourinaryLASERFiber, GenitourinaryUreteralBasket, GenitourinarySpecialtyTrocar, GenitourinarySuppliesOther, GenitourinarySuture, GenitourinaryVLok, GenitourinaryVLokSize, GenitourinaryStratafix, GenitourinaryStratafixSize, GenitourinaryQuil, GenitourinaryQuilSize, GenitourinarySutureOther, GenitourinaryMedications, b_and_o, Genitourinaryic_green, Genitourinarymethylene_blue, omipaque, urojet, GenitourinaryMedicationsOther, GenitourinaryLoaners, GenitourinaryLoaners_value, GenitourinaryTrayRequested) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s,%s, %s, %s, %s, %s, %s,%s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table genitourinaryLhh")
        mysql_connection.commit()

def updategenitourinaryLhh(mongo_id , serviceRequestId ,genitourinaryLhh):
        print(f"Inside updategenitourinaryLhh to update document in genitourinaryLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE genitourinaryLhh SET serviceRequestId = %s, GenitourinaryBiologicTissue = %s, GenitourinaryAlloderm = %s, GenitourinaryAllodermThicknessSize = %s, GenitourinaryEquipment = %s, allen_fluid_pole = %s, bk_medical_flex_focus_800_utz = %s, boston_sci_lithovue = %s, conmed_argon_beam = %s, conmed_air_seal = %s, Genitourinary_greenlight_laser = %s, Genitourinary_holmium_laser = %s, Genitourinary_ligasure_machine = %s, Genitourinary_olympus_bipolar_resectoscope = %s, olympus_digital_scope_tower = %s, olympus_shockpulse_se_machine = %s, or_solutoons_hush_slush_ice_slush = %s, stryker_neptune_suction_machine = %s, sorin_cell_saver = %s, stryker_monitor = %s, xi_robot_right_docking_left_docking = %s, Genitourinary_zeiss_microscope = %s, m_ranger_irrigation_fluid_warmer = %s, GenitourinaryImagingSupportService = %s, GenitourinaryXRays = %s, GenitourinaryImagingSupportServiceOther = %s, GenitourinaryImplants = %s, GenitourinaryAMSPosition = %s, GenitourinaryAMSVendor = %s, GenitourinaryAMSLength = %s, GenitourinaryAMSRTESize = %s, GenitourinaryColoplastPosition = %s, GenitourinaryColoplastType = %s, GenitourinaryColoplastSize = %s, GenitourinaryGynecareTVTO = %s, GenitourinaryUreteralStent = %s, GenitourinaryInstrumentation = %s, boston_sci_single_use_digital_flexible_ureteroscope = %s, bk_rectal_probe = %s, cystoscopy_set = %s, da_vinci_xi_basic_instruments = %s, gu_miscellaneous_tray = %s, gu_laparoscopic_tray_and_accessories = %s, gu_robotic_tray_and_accessories = %s, ipp_tray_formerly_dr__eids_tray = %s, olympus_digital_ureteroscope = %s, Genitourinaryolympus_bipolar_resectoscope = %s, olympus_shockpulse_lithotripsy_set = %s, percutaneous_nephrolithotomy_set = %s, semi_rigid_ureteroscope = %s, GenitourinaryNephroscope = %s, GenitourinaryDaVinciXIScope = %s, GenitourinaryDaVinciXIScopeSpecify = %s, GenitourinaryLabRequests = %s, GenitourinaryPathology = %s, GenitourinaryPositioningDevices = %s, Genitourinary_allen_stirrups_with_clamps = %s, Genitourinary_axillary_roll = %s, Genitourinary_gel_rolls = %s, GenitourinaryGUBed = %s, GenitourinarySupplies = %s, fr_5_open_ended_catheter = %s, dual_lumen_catheter = %s, m_ranger_irrigation_wamng_system = %s, piranha_3f_flexible = %s, GenitourinaryStaples = %s, GenitourinaryStaplesSize = %s, GenitourinaryWires = %s, GenitourinaryWiresOther = %s, GenitourinaryHemostaticAgent = %s, GenitourinaryHemostaticAgentOther = %s, GenitourinaryUroMaxNephromax = %s, GenitourinaryLASERFiber = %s, GenitourinaryUreteralBasket = %s, GenitourinarySpecialtyTrocar = %s, GenitourinarySuppliesOther = %s, GenitourinarySuture = %s, GenitourinaryVLok = %s, GenitourinaryVLokSize = %s, GenitourinaryStratafix = %s, GenitourinaryStratafixSize = %s, GenitourinaryQuil = %s, GenitourinaryQuilSize = %s, GenitourinarySutureOther = %s, GenitourinaryMedications = %s, b_and_o = %s, Genitourinaryic_green = %s, Genitourinarymethylene_blue = %s, omipaque = %s, urojet = %s, GenitourinaryMedicationsOther = %s, GenitourinaryLoaners = %s, GenitourinaryLoaners_value = %s, GenitourinaryTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, genitourinaryLhh['GenitourinaryBiologicTissue'], genitourinaryLhh['GenitourinaryAlloderm'], genitourinaryLhh['GenitourinaryAllodermThicknessSize'], genitourinaryLhh['GenitourinaryEquipment'], genitourinaryLhh['allen_fluid_pole'], genitourinaryLhh['bk_medical_flex_focus_800_utz'], genitourinaryLhh['boston_sci_lithovue'], genitourinaryLhh['conmed_argon_beam'], genitourinaryLhh['conmed_air_seal'], genitourinaryLhh['Genitourinary_greenlight_laser'], genitourinaryLhh['Genitourinary_holmium_laser'], genitourinaryLhh['Genitourinary_ligasure_machine'], genitourinaryLhh['Genitourinary_olympus_bipolar_resectoscope'], genitourinaryLhh['olympus_digital_scope_tower'], genitourinaryLhh['olympus_shockpulse_se_machine'], genitourinaryLhh['or_solutoons_hush_slush_ice_slush'], genitourinaryLhh['stryker_neptune_suction_machine'], genitourinaryLhh['sorin_cell_saver'], genitourinaryLhh['stryker_monitor'], genitourinaryLhh['xi_robot_right_docking_left_docking'], genitourinaryLhh['Genitourinary_zeiss_microscope'], genitourinaryLhh['m_ranger_irrigation_fluid_warmer'], genitourinaryLhh['GenitourinaryImagingSupportService'], genitourinaryLhh['GenitourinaryXRays'], genitourinaryLhh['GenitourinaryImagingSupportServiceOther'], genitourinaryLhh['GenitourinaryImplants'], genitourinaryLhh['GenitourinaryAMSPosition'], genitourinaryLhh['GenitourinaryAMSVendor'], genitourinaryLhh['GenitourinaryAMSLength'], genitourinaryLhh['GenitourinaryAMSRTESize'],genitourinaryLhh['GenitourinaryColoplastPosition'], genitourinaryLhh['GenitourinaryColoplastType'], genitourinaryLhh['GenitourinaryColoplastSize'], genitourinaryLhh['GenitourinaryGynecareTVTO'], genitourinaryLhh['GenitourinaryUreteralStent'], genitourinaryLhh['GenitourinaryInstrumentation'], genitourinaryLhh['boston_sci_single_use_digital_flexible_ureteroscope'], genitourinaryLhh['bk_rectal_probe'], genitourinaryLhh['cystoscopy_set'], genitourinaryLhh['da_vinci_xi_basic_instruments'], genitourinaryLhh['gu_miscellaneous_tray'], genitourinaryLhh['gu_laparoscopic_tray_and_accessories'], genitourinaryLhh['gu_robotic_tray_and_accessories'], genitourinaryLhh['ipp_tray_formerly_dr__eids_tray'], genitourinaryLhh['olympus_digital_ureteroscope'], genitourinaryLhh['Genitourinaryolympus_bipolar_resectoscope'], genitourinaryLhh['olympus_shockpulse_lithotripsy_set'], genitourinaryLhh['percutaneous_nephrolithotomy_set'], genitourinaryLhh['semi_rigid_ureteroscope'], genitourinaryLhh['GenitourinaryNephroscope'], genitourinaryLhh['GenitourinaryDaVinciXIScope'], genitourinaryLhh['GenitourinaryDaVinciXIScopeSpecify'], genitourinaryLhh['GenitourinaryLabRequests'], genitourinaryLhh['GenitourinaryPathology'], genitourinaryLhh['GenitourinaryPositioningDevices'], genitourinaryLhh['Genitourinary_allen_stirrups_with_clamps'], genitourinaryLhh['Genitourinary_axillary_roll'], genitourinaryLhh['Genitourinary_gel_rolls'], genitourinaryLhh['GenitourinaryGUBed'], genitourinaryLhh['GenitourinarySupplies'], genitourinaryLhh['fr_5_open_ended_catheter'], genitourinaryLhh['dual_lumen_catheter'], genitourinaryLhh['m_ranger_irrigation_wamng_system'], genitourinaryLhh['piranha_3f_flexible'], genitourinaryLhh['GenitourinaryStaples'], genitourinaryLhh['GenitourinaryStaplesSize'], genitourinaryLhh['GenitourinaryWires'], genitourinaryLhh['GenitourinaryWiresOther'], genitourinaryLhh['GenitourinaryHemostaticAgent'], genitourinaryLhh['GenitourinaryHemostaticAgentOther'], genitourinaryLhh['GenitourinaryUroMaxNephromax'], genitourinaryLhh['GenitourinaryLASERFiber'], genitourinaryLhh['GenitourinaryUreteralBasket'], genitourinaryLhh['GenitourinarySpecialtyTrocar'], genitourinaryLhh['GenitourinarySuppliesOther'], genitourinaryLhh['GenitourinarySuture'], genitourinaryLhh['GenitourinaryVLok'], genitourinaryLhh['GenitourinaryVLokSize'], genitourinaryLhh['GenitourinaryStratafix'], genitourinaryLhh['GenitourinaryStratafixSize'], genitourinaryLhh['GenitourinaryQuil'], genitourinaryLhh['GenitourinaryQuilSize'], genitourinaryLhh['GenitourinarySutureOther'], genitourinaryLhh['GenitourinaryMedications'], genitourinaryLhh['b_and_o'], genitourinaryLhh['ic_green'], genitourinaryLhh['Genitourinarymethylene_blue'], genitourinaryLhh['omipaque'], genitourinaryLhh['urojet'], genitourinaryLhh['GenitourinaryMedicationsOther'], genitourinaryLhh['GenitourinaryLoaners'], genitourinaryLhh['GenitourinaryLoaners_value'], genitourinaryLhh['GenitourinaryTrayRequested'],mongo_id))
        print(f"Updated document in ENTLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()




def insertgynecologyLhh(mongo_id , serviceRequestId ,gynecologyLhh):
        print(f"Inside insertgynecologyLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS gynecologyLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,GynecologyEquipment TEXT, acmi_suction_d_c_machine TEXT, Gynecology_harmonic_machine TEXT, Gynecology_ligasure_machine TEXT, myosure_machine TEXT, novasure TEXT, Gynecology_robotic_bed TEXT, Gynecology_stryker_monitor TEXT, Gynecology_sorin_cell_saver TEXT, stryker_slave_monitor TEXT, stryker_fluid_management TEXT, Gynecology_thunderbeat_machine TEXT, GynecologyGUBed TEXT, GynecologyXIRobot TEXT, GynecologyImplant TEXT, boston_sci_lynx TEXT, ethicon_tvt_device TEXT, gynecare_tvto TEXT, ureteral_stent_ TEXT, GynecologyCalderaMesh TEXT, GynecologyCalderaMeshSize TEXT, GynecologyGynecologyImplantOther TEXT, GynecologyInstrumentation TEXT, colposcope TEXT, da_vinci_basic_xi_instruments TEXT, eragon_bipolar TEXT, erbe_bipolar_resectoscope_tray_ TEXT, gyn_oncolgy_tray TEXT, olympus_bipolar_resctoscope_tray TEXT, uro_gyn_set TEXT, GynecologyAlbarrans TEXT, GynecologyInstrumentationOther TEXT, GynecologyLabRequests TEXT, GynecologyPathology TEXT, GynecologyPositioningDevices TEXT, Gynecologyallen_stirrups_with_clamps TEXT, GynecologyPinkPad TEXT, GynecologySupplies TEXT, GynecologyVCare TEXT, GynecologyVCareSize TEXT, GynecologyLigasureTypeSize TEXT, GynecologyHemostaticAgent TEXT, GynecologySuppliesOther TEXT, GynecologySuture TEXT, GynecologyVLok TEXT, GynecologyVLokSize TEXT, GynecologyStratafix TEXT, GynecologyStratafixSize TEXT, GynecologyQuil TEXT, GynecologyQuilSize TEXT, GynecologyMedication TEXT, Gynecology_ic_green TEXT, Gynecology_methylene_blue TEXT, pitressin TEXT, vinegar TEXT, GynecologyMarcaine TEXT, GynecologyMarcaineStrength TEXT, GynecologyLoaners TEXT, GynecologyLoanersVendor TEXT, GynecologyTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, gynecologyLhh['GynecologyEquipment'], gynecologyLhh['acmi_suction_d_c_machine'], gynecologyLhh['Gynecology_harmonic_machine'], gynecologyLhh['Gynecology_ligasure_machine'], gynecologyLhh['myosure_machine'], gynecologyLhh['novasure'], gynecologyLhh['Gynecology_robotic_bed'], gynecologyLhh['Gynecology_stryker_monitor'], gynecologyLhh['Gynecology_sorin_cell_saver'], gynecologyLhh['stryker_slave_monitor'], gynecologyLhh['stryker_fluid_management'], gynecologyLhh['Gynecology_thunderbeat_machine'], gynecologyLhh['GynecologyGUBed'], gynecologyLhh['GynecologyXIRobot'], gynecologyLhh['GynecologyImplant'], gynecologyLhh['boston_sci_lynx'], gynecologyLhh['ethicon_tvt_device'], gynecologyLhh['gynecare_tvto'], gynecologyLhh['ureteral_stent_'], gynecologyLhh['GynecologyCalderaMesh'], gynecologyLhh['GynecologyCalderaMeshSize'], gynecologyLhh['GynecologyGynecologyImplantOther'], gynecologyLhh['GynecologyInstrumentation'], gynecologyLhh['colposcope'], gynecologyLhh['da_vinci_basic_xi_instruments'], gynecologyLhh['eragon_bipolar'], gynecologyLhh['erbe_bipolar_resectoscope_tray_'], gynecologyLhh['gyn_oncolgy_tray'], gynecologyLhh['olympus_bipolar_resctoscope_tray'], gynecologyLhh['uro_gyn_set'], gynecologyLhh['GynecologyAlbarrans'], gynecologyLhh['GynecologyInstrumentationOther'], gynecologyLhh['GynecologyLabRequests'], gynecologyLhh['GynecologyPathology'], gynecologyLhh['GynecologyPositioningDevices'], gynecologyLhh['Gynecologyallen_stirrups_with_clamps'], gynecologyLhh['GynecologyPinkPad'], gynecologyLhh['GynecologySupplies'], gynecologyLhh['GynecologyVCare'], gynecologyLhh['GynecologyVCareSize'], gynecologyLhh['GynecologyLigasureTypeSize'], gynecologyLhh['GynecologyHemostaticAgent'], gynecologyLhh['GynecologySuppliesOther'], gynecologyLhh['GynecologySuture'], gynecologyLhh['GynecologyVLok'], gynecologyLhh['GynecologyVLokSize'], gynecologyLhh['GynecologyStratafix'], gynecologyLhh['GynecologyStratafixSize'], gynecologyLhh['GynecologyQuil'], gynecologyLhh['GynecologyQuilSize'], gynecologyLhh['GynecologyMedication'], gynecologyLhh['Gynecology_ic_green'], gynecologyLhh['Gynecology_methylene_blue'], gynecologyLhh['pitressin'], gynecologyLhh['vinegar'], gynecologyLhh['GynecologyMarcaine'], gynecologyLhh['GynecologyMarcaineStrength'], gynecologyLhh['GynecologyLoaners'], gynecologyLhh['GynecologyLoanersVendor'], gynecologyLhh['GynecologyTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO gynecologyLhh (serviceRequest_mongo_id, serviceRequestId, GynecologyEquipment, acmi_suction_d_c_machine, Gynecology_harmonic_machine, Gynecology_ligasure_machine, myosure_machine, novasure, Gynecology_robotic_bed, Gynecology_stryker_monitor, Gynecology_sorin_cell_saver, stryker_slave_monitor, stryker_fluid_management, Gynecology_thunderbeat_machine, GynecologyGUBed, GynecologyXIRobot, GynecologyImplant, boston_sci_lynx, ethicon_tvt_device, gynecare_tvto, ureteral_stent_, GynecologyCalderaMesh, GynecologyCalderaMeshSize, GynecologyGynecologyImplantOther, GynecologyInstrumentation, colposcope, da_vinci_basic_xi_instruments, eragon_bipolar, erbe_bipolar_resectoscope_tray_, gyn_oncolgy_tray, olympus_bipolar_resctoscope_tray, uro_gyn_set, GynecologyAlbarrans, GynecologyInstrumentationOther, GynecologyLabRequests, GynecologyPathology, GynecologyPositioningDevices, Gynecologyallen_stirrups_with_clamps, GynecologyPinkPad, GynecologySupplies, GynecologyVCare, GynecologyVCareSize, GynecologyLigasureTypeSize, GynecologyHemostaticAgent, GynecologySuppliesOther, GynecologySuture, GynecologyVLok, GynecologyVLokSize, GynecologyStratafix, GynecologyStratafixSize, GynecologyQuil, GynecologyQuilSize, GynecologyMedication, Gynecology_ic_green, Gynecology_methylene_blue, pitressin, vinegar, GynecologyMarcaine, GynecologyMarcaineStrength, GynecologyLoaners, GynecologyLoanersVendor, GynecologyTrayRequested) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table gynecologyLhh")
        mysql_connection.commit()

def updategynecologyLhh(mongo_id , serviceRequestId ,gynecologyLhh):
        print(f"Inside ENTLhh to update document in gynecologyLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE gynecologyLhh SET serviceRequestId = %s,GynecologyEquipment = %s, acmi_suction_d_c_machine = %s, Gynecology_harmonic_machine = %s, Gynecology_ligasure_machine = %s, myosure_machine = %s, novasure = %s, Gynecology_robotic_bed = %s, Gynecology_stryker_monitor = %s, Gynecology_sorin_cell_saver = %s, stryker_slave_monitor = %s, stryker_fluid_management = %s, Gynecology_thunderbeat_machine = %s, GynecologyGUBed = %s, GynecologyXIRobot = %s, GynecologyImplant = %s, boston_sci_lynx = %s, ethicon_tvt_device = %s, gynecare_tvto = %s, ureteral_stent_ = %s, GynecologyCalderaMesh = %s, GynecologyCalderaMeshSize = %s, GynecologyGynecologyImplantOther = %s, GynecologyInstrumentation = %s, colposcope = %s, da_vinci_basic_xi_instruments = %s, eragon_bipolar = %s, erbe_bipolar_resectoscope_tray_ = %s, gyn_oncolgy_tray = %s, olympus_bipolar_resctoscope_tray = %s, uro_gyn_set = %s, GynecologyAlbarrans = %s, GynecologyInstrumentationOther = %s, GynecologyLabRequests = %s, GynecologyPathology = %s, GynecologyPositioningDevices = %s, Gynecologyallen_stirrups_with_clamps = %s, GynecologyPinkPad = %s, GynecologySupplies = %s, GynecologyVCare = %s, GynecologyVCareSize = %s, GynecologyLigasureTypeSize = %s, GynecologyHemostaticAgent = %s, GynecologySuppliesOther = %s, GynecologySuture = %s, GynecologyVLok = %s, GynecologyVLokSize = %s, GynecologyStratafix = %s, GynecologyStratafixSize = %s, GynecologyQuil = %s, GynecologyQuilSize = %s, GynecologyMedication = %s, Gynecology_ic_green = %s, Gynecology_methylene_blue = %s, pitressin = %s, vinegar = %s, GynecologyMarcaine = %s, GynecologyMarcaineStrength = %s, GynecologyLoaners = %s, GynecologyLoanersVendor = %s, GynecologyTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, gynecologyLhh['GynecologyEquipment'], gynecologyLhh['acmi_suction_d_c_machine'], gynecologyLhh['Gynecology_harmonic_machine'], gynecologyLhh['Gynecology_ligasure_machine'], gynecologyLhh['myosure_machine'], gynecologyLhh['novasure'], gynecologyLhh['Gynecology_robotic_bed'], gynecologyLhh['Gynecology_stryker_monitor'], gynecologyLhh['Gynecology_sorin_cell_saver'], gynecologyLhh['stryker_slave_monitor'], gynecologyLhh['stryker_fluid_management'], gynecologyLhh['Gynecology_thunderbeat_machine'], gynecologyLhh['GynecologyGUBed'], gynecologyLhh['GynecologyXIRobot'], gynecologyLhh['GynecologyImplant'], gynecologyLhh['boston_sci_lynx'], gynecologyLhh['ethicon_tvt_device'], gynecologyLhh['gynecare_tvto'], gynecologyLhh['ureteral_stent_'], gynecologyLhh['GynecologyCalderaMesh'], gynecologyLhh['GynecologyCalderaMeshSize'], gynecologyLhh['GynecologyGynecologyImplantOther'], gynecologyLhh['GynecologyInstrumentation'], gynecologyLhh['colposcope'], gynecologyLhh['da_vinci_basic_xi_instruments'], gynecologyLhh['eragon_bipolar'], gynecologyLhh['erbe_bipolar_resectoscope_tray_'], gynecologyLhh['gyn_oncolgy_tray'], gynecologyLhh['olympus_bipolar_resctoscope_tray'], gynecologyLhh['uro_gyn_set'], gynecologyLhh['GynecologyAlbarrans'], gynecologyLhh['GynecologyInstrumentationOther'], gynecologyLhh['GynecologyLabRequests'], gynecologyLhh['GynecologyPathology'], gynecologyLhh['GynecologyPositioningDevices'], gynecologyLhh['Gynecologyallen_stirrups_with_clamps'], gynecologyLhh['GynecologyPinkPad'], gynecologyLhh['GynecologySupplies'], gynecologyLhh['GynecologyVCare'], gynecologyLhh['GynecologyVCareSize'], gynecologyLhh['GynecologyLigasureTypeSize'], gynecologyLhh['GynecologyHemostaticAgent'], gynecologyLhh['GynecologySuppliesOther'], gynecologyLhh['GynecologySuture'], gynecologyLhh['GynecologyVLok'], gynecologyLhh['GynecologyVLokSize'], gynecologyLhh['GynecologyStratafix'], gynecologyLhh['GynecologyStratafixSize'], gynecologyLhh['GynecologyQuil'], gynecologyLhh['GynecologyQuilSize'], gynecologyLhh['GynecologyMedication'], gynecologyLhh['Gynecology_ic_green'], gynecologyLhh['Gynecology_methylene_blue'], gynecologyLhh['pitressin'], gynecologyLhh['vinegar'], gynecologyLhh['GynecologyMarcaine'], gynecologyLhh['GynecologyMarcaineStrength'], gynecologyLhh['GynecologyLoaners'], gynecologyLhh['GynecologyLoanersVendor'], gynecologyLhh['GynecologyTrayRequested'],mongo_id))
        print(f"Updated document in gynecologyLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def insertmaxillofacialLhh(mongo_id , serviceRequestId ,maxillofacialLhh):
        print(f"Inside insertmaxillofacialLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS maxillofacialLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,MaxilloBiologicsTissue TEXT, MaxilloBoneGraft TEXT, MaxilloInfuse TEXT, MaxilloInfuseSize TEXT, MaxilloMembrane TEXT, MaxilloMembraneType TEXT, MaxilloMembraneSize TEXT, MaxilloBiologicsTissueOther TEXT, MaxilloEquipment TEXT, cryotherapy_ TEXT, doppler_ TEXT, Maxilloligasure_machine TEXT, Maxillomicroscope TEXT, Maxillonim_machine TEXT, Maxillostryker_core_drill_console TEXT, tourniquet TEXT, vro_drill TEXT, MaxilloEquipmentOther TEXT, MaxilloImplants TEXT, choice_spine TEXT, Maxillokls TEXT, medtronic TEXT, nobelbiocare TEXT, synthes_depuy TEXT, Maxillostryker TEXT, MaxilloImplantsOther TEXT, MaxilloLabRequest TEXT, MaxilloPathology TEXT, MaxilloPositioningDevices TEXT, Maxilloaxillary_roll TEXT, Maxillodonut TEXT, Maxillogel_rolls TEXT, Maxillopink_pad TEXT, Maxilloregular_bed TEXT, MaxilloPositioningDevicesOther TEXT, MaxilloSupplies TEXT, MaxilloTracheosotomyTube TEXT, MaxilloTracheosotomyTubeType TEXT, MaxilloTracheosotomyTubeSize TEXT, MaxilloHemostaticAgent TEXT, MaxilloHemostaticAgentOther TEXT, MaxilloSuppliesOther TEXT, MaxilloSuture TEXT, MaxilloSutureOther TEXT, MaxilloMedications TEXT, Maxilloexparel TEXT, lidocaine_w_epi TEXT, Maxillomethylene_blue TEXT, MaxilloMedicationsOther TEXT, MaxilloLoaners TEXT, MaxilloLoanersVendor TEXT, MaxilloTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, maxillofacialLhh['MaxilloBiologicsTissue'], maxillofacialLhh['MaxilloBoneGraft'], maxillofacialLhh['MaxilloInfuse'], maxillofacialLhh['MaxilloInfuseSize'], maxillofacialLhh['MaxilloMembrane'], maxillofacialLhh['MaxilloMembraneType'], maxillofacialLhh['MaxilloMembraneSize'], maxillofacialLhh['MaxilloBiologicsTissueOther'], maxillofacialLhh['MaxilloEquipment'], maxillofacialLhh['cryotherapy_'], maxillofacialLhh['doppler_'], maxillofacialLhh['Maxilloligasure_machine'], maxillofacialLhh['Maxillomicroscope'], maxillofacialLhh['Maxillonim_machine'], maxillofacialLhh['Maxillostryker_core_drill_console'], maxillofacialLhh['tourniquet'], maxillofacialLhh['vro_drill'], maxillofacialLhh['MaxilloEquipmentOther'], maxillofacialLhh['MaxilloImplants'], maxillofacialLhh['choice_spine'], maxillofacialLhh['Maxillokls'], maxillofacialLhh['medtronic'], maxillofacialLhh['nobelbiocare'], maxillofacialLhh['synthes_depuy'], maxillofacialLhh['Maxillostryker'], maxillofacialLhh['MaxilloImplantsOther'], maxillofacialLhh['MaxilloLabRequest'], maxillofacialLhh['MaxilloPathology'], maxillofacialLhh['MaxilloPositioningDevices'], maxillofacialLhh['Maxilloaxillary_roll'], maxillofacialLhh['Maxillodonut'], maxillofacialLhh['Maxillogel_rolls'], maxillofacialLhh['Maxillopink_pad'], maxillofacialLhh['Maxilloregular_bed'], maxillofacialLhh['MaxilloPositioningDevicesOther'], maxillofacialLhh['MaxilloSupplies'], maxillofacialLhh['MaxilloTracheosotomyTube'], maxillofacialLhh['MaxilloTracheosotomyTubeType'], maxillofacialLhh['MaxilloTracheosotomyTubeSize'], maxillofacialLhh['MaxilloHemostaticAgent'], maxillofacialLhh['MaxilloHemostaticAgentOther'], maxillofacialLhh['MaxilloSuppliesOther'], maxillofacialLhh['MaxilloSuture'], maxillofacialLhh['MaxilloSutureOther'], maxillofacialLhh['MaxilloMedications'], maxillofacialLhh['Maxilloexparel'], maxillofacialLhh['lidocaine_w_epi'], maxillofacialLhh['Maxillomethylene_blue'], maxillofacialLhh['MaxilloMedicationsOther'], maxillofacialLhh['MaxilloLoaners'], maxillofacialLhh['MaxilloLoanersVendor'], maxillofacialLhh['MaxilloTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO maxillofacialLhh (serviceRequest_mongo_id, serviceRequestId, MaxilloBiologicsTissue, MaxilloBoneGraft, MaxilloInfuse, MaxilloInfuseSize, MaxilloMembrane, MaxilloMembraneType, MaxilloMembraneSize, MaxilloBiologicsTissueOther, MaxilloEquipment, cryotherapy_, doppler_, Maxilloligasure_machine, Maxillomicroscope, Maxillonim_machine, Maxillostryker_core_drill_console, tourniquet, vro_drill, MaxilloEquipmentOther, MaxilloImplants, choice_spine, Maxillokls, medtronic, nobelbiocare, synthes_depuy, Maxillostryker, MaxilloImplantsOther, MaxilloLabRequest, MaxilloPathology, MaxilloPositioningDevices, Maxilloaxillary_roll, Maxillodonut, Maxillogel_rolls, Maxillopink_pad, Maxilloregular_bed, MaxilloPositioningDevicesOther, MaxilloSupplies, MaxilloTracheosotomyTube, MaxilloTracheosotomyTubeType, MaxilloTracheosotomyTubeSize, MaxilloHemostaticAgent, MaxilloHemostaticAgentOther, MaxilloSuppliesOther, MaxilloSuture, MaxilloSutureOther, MaxilloMedications, Maxilloexparel, lidocaine_w_epi, Maxillomethylene_blue, MaxilloMedicationsOther, MaxilloLoaners, MaxilloLoanersVendor, MaxilloTrayRequested) VALUES ( %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table maxillofacialLhh")
        mysql_connection.commit()

def updatemaxillofacialLhh(mongo_id , serviceRequestId ,maxillofacialLhh):
        print(f"Inside ENTLhh to update document in maxillofacialLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE maxillofacialLhh SET serviceRequestId = %s,MaxilloBiologicsTissue = %s, MaxilloBoneGraft = %s, MaxilloInfuse = %s, MaxilloInfuseSize = %s, MaxilloMembrane = %s, MaxilloMembraneType = %s, MaxilloMembraneSize = %s, MaxilloBiologicsTissueOther = %s, MaxilloEquipment = %s, cryotherapy_ = %s, doppler_ = %s, Maxilloligasure_machine = %s, Maxillomicroscope = %s, Maxillonim_machine = %s, Maxillostryker_core_drill_console = %s, tourniquet = %s, vro_drill = %s, MaxilloEquipmentOther = %s, MaxilloImplants = %s, choice_spine = %s, Maxillokls = %s, medtronic = %s, nobelbiocare = %s, synthes_depuy = %s, Maxillostryker = %s, MaxilloImplantsOther = %s, MaxilloLabRequest = %s, MaxilloPathology = %s, MaxilloPositioningDevices = %s, Maxilloaxillary_roll = %s, Maxillodonut = %s, Maxillogel_rolls = %s, Maxillopink_pad = %s, Maxilloregular_bed = %s, MaxilloPositioningDevicesOther = %s, MaxilloSupplies = %s, MaxilloTracheosotomyTube = %s, MaxilloTracheosotomyTubeType = %s, MaxilloTracheosotomyTubeSize = %s, MaxilloHemostaticAgent = %s, MaxilloHemostaticAgentOther = %s, MaxilloSuppliesOther = %s, MaxilloSuture = %s, MaxilloSutureOther = %s, MaxilloMedications = %s, Maxilloexparel = %s, lidocaine_w_epi = %s, Maxillomethylene_blue = %s, MaxilloMedicationsOther = %s, MaxilloLoaners = %s, MaxilloLoanersVendor = %s, MaxilloTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, maxillofacialLhh['MaxilloBiologicsTissue'], maxillofacialLhh['MaxilloBoneGraft'], maxillofacialLhh['MaxilloInfuse'], maxillofacialLhh['MaxilloInfuseSize'], maxillofacialLhh['MaxilloMembrane'], maxillofacialLhh['MaxilloMembraneType'], maxillofacialLhh['MaxilloMembraneSize'], maxillofacialLhh['MaxilloBiologicsTissueOther'], maxillofacialLhh['MaxilloEquipment'], maxillofacialLhh['cryotherapy_'], maxillofacialLhh['doppler_'], maxillofacialLhh['Maxilloligasure_machine'], maxillofacialLhh['Maxillomicroscope'], maxillofacialLhh['Maxillonim_machine'], maxillofacialLhh['Maxillostryker_core_drill_console'], maxillofacialLhh['tourniquet'], maxillofacialLhh['vro_drill'], maxillofacialLhh['MaxilloEquipmentOther'], maxillofacialLhh['MaxilloImplants'], maxillofacialLhh['choice_spine'], maxillofacialLhh['Maxillokls'], maxillofacialLhh['medtronic'], maxillofacialLhh['nobelbiocare'], maxillofacialLhh['synthes_depuy'], maxillofacialLhh['Maxillostryker'], maxillofacialLhh['MaxilloImplantsOther'], maxillofacialLhh['MaxilloLabRequest'], maxillofacialLhh['MaxilloPathology'], maxillofacialLhh['MaxilloPositioningDevices'], maxillofacialLhh['Maxilloaxillary_roll'], maxillofacialLhh['Maxillodonut'], maxillofacialLhh['Maxillogel_rolls'], maxillofacialLhh['Maxillopink_pad'], maxillofacialLhh['Maxilloregular_bed'], maxillofacialLhh['MaxilloPositioningDevicesOther'], maxillofacialLhh['MaxilloSupplies'], maxillofacialLhh['MaxilloTracheosotomyTube'], maxillofacialLhh['MaxilloTracheosotomyTubeType'], maxillofacialLhh['MaxilloTracheosotomyTubeSize'], maxillofacialLhh['MaxilloHemostaticAgent'], maxillofacialLhh['MaxilloHemostaticAgentOther'], maxillofacialLhh['MaxilloSuppliesOther'], maxillofacialLhh['MaxilloSuture'], maxillofacialLhh['MaxilloSutureOther'], maxillofacialLhh['MaxilloMedications'], maxillofacialLhh['Maxilloexparel'], maxillofacialLhh['lidocaine_w_epi'], maxillofacialLhh['Maxillomethylene_blue'], maxillofacialLhh['MaxilloMedicationsOther'], maxillofacialLhh['MaxilloLoaners'], maxillofacialLhh['MaxilloLoanersVendor'], maxillofacialLhh['MaxilloTrayRequested'],mongo_id))
        print(f"Updated document in maxillofacialLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def insertneuroSurgeryLhh(mongo_id , serviceRequestId ,neuroSurgeryLhh):
        print(f"Inside insertneuroSurgeryLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS neuroSurgeryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,NeurosurgeryBiologicsTissue TEXT,NeurosurgeryAlloderm TEXT,NeurosurgeryAllodermThicknessSize TEXT,NeurosurgeryInfuse TEXT,NeurosurgeryInfuseSize TEXT,NeurosurgeryAllograftBone TEXT,NeurosurgeryFrozenTissue TEXT,NeurosurgeryNerveGraft TEXT,NeurosurgeryBiologicsTissueOther TEXT,NeurosurgeryEquipment TEXT,artemis_machine TEXT,aquamantys TEXT,doppler_9_3 TEXT,doppler_transflow TEXT,Neurosurgerymicro_doppler TEXT,Neurosurgerynim_machine TEXT,neuro_surgical_chair TEXT,Neurosurgerystryker_navigation TEXT,Neurosurgerystryker_video_tower TEXT,Neurosurgerystortz_video_tower TEXT,Neurosurgerystryker_core_drill_saw TEXT,Neurosurgeryultrasound TEXT,NeurosurgeryMicroscope TEXT,NeurosurgeryEquipmentOther TEXT,NeurosurgeryImagingSupportService TEXT,NeurosurgeryXRays TEXT,NeurosurgeryImagingSupportServiceOther TEXT,NeurosurgeryImplant TEXT,boston_scientific_material_for_dbs TEXT,fhc_materials_for_dbs TEXT,Neurosurgerynerve_graft TEXT,NeurosurgeryCustomMold TEXT,NeurosurgeryCustomMoldVendor TEXT,NeurosurgerySpineImplants TEXT,NeurosurgeryImplantOther TEXT,NeurosurgeryLabRequests TEXT,NeurosurgeryPathology TEXT,NeurosurgeryLabRequestsOther TEXT,NeurosurgeryPositioningDevices TEXT,allen_table_4_post_ TEXT,allen_table_flat TEXT,allen_table_mayfield_attachment TEXT,Neurosurgeryaxillary_roll TEXT,Neurosurgerybean_bag TEXT,Neurosurgerybolster TEXT,Neurosurgerychest_rolls TEXT,Neurosurgerychin_strap TEXT,Neurosurgerydora_luna_head_holder TEXT,Neurosurgerydonut TEXT,Neurosurgerygardner_well_tongs TEXT,Neurosurgeryhorshoe_shoe_mayfield_head_holder TEXT,Neurosurgeryjackson_table_4_post TEXT,Neurosurgeryjackson_tale_flat TEXT,Neurosurgerylateral_arm_board TEXT,Neurosurgerysugita_head_holder_ TEXT,Neurosurgeryskull_clamps_mayfield_head_holder TEXT,Neurosurgerywilson_frame TEXT,NeurosurgeryWeight TEXT,NeurosurgeryPositioningDevicesOther TEXT,NeurosurgeryMedication TEXT,exparel_needs_to_go_to_pharmacy TEXT,gleolan TEXT,manitolol_needs_to_go_to_pharmacy TEXT,Neurosurgerymethylene_blue TEXT,NeurosurgeryMedicationOther TEXT,NeurosurgeryLoaners TEXT,NeurosurgeryLoanersVendor TEXT,NeurosurgeryTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, neuroSurgeryLhh['NeurosurgeryBiologicsTissue'], neuroSurgeryLhh['NeurosurgeryAlloderm'], neuroSurgeryLhh['NeurosurgeryAllodermThicknessSize'], neuroSurgeryLhh['NeurosurgeryInfuse'], neuroSurgeryLhh['NeurosurgeryInfuseSize'], neuroSurgeryLhh['NeurosurgeryAllograftBone'], neuroSurgeryLhh['NeurosurgeryFrozenTissue'], neuroSurgeryLhh['NeurosurgeryNerveGraft'], neuroSurgeryLhh['NeurosurgeryBiologicsTissueOther'], neuroSurgeryLhh['NeurosurgeryEquipment'], neuroSurgeryLhh['artemis_machine'], neuroSurgeryLhh['aquamantys'], neuroSurgeryLhh['doppler_9_3'], neuroSurgeryLhh['doppler_transflow'], neuroSurgeryLhh['Neurosurgerymicro_doppler'], neuroSurgeryLhh['Neurosurgerynim_machine'], neuroSurgeryLhh['neuro_surgical_chair'], neuroSurgeryLhh['Neurosurgerystryker_navigation'], neuroSurgeryLhh['Neurosurgerystryker_video_tower'], neuroSurgeryLhh['Neurosurgerystortz_video_tower'], neuroSurgeryLhh['Neurosurgerystryker_core_drill_saw'], neuroSurgeryLhh['Neurosurgeryultrasound'], neuroSurgeryLhh['NeurosurgeryMicroscope'], neuroSurgeryLhh['NeurosurgeryEquipmentOther'], neuroSurgeryLhh['NeurosurgeryImagingSupportService'], neuroSurgeryLhh['NeurosurgeryXRays'], neuroSurgeryLhh['NeurosurgeryImagingSupportServiceOther'], neuroSurgeryLhh['NeurosurgeryImplant'], neuroSurgeryLhh['boston_scientific_material_for_dbs'], neuroSurgeryLhh['fhc_materials_for_dbs'], neuroSurgeryLhh['Neurosurgerynerve_graft'], neuroSurgeryLhh['NeurosurgeryCustomMold'], neuroSurgeryLhh['NeurosurgeryCustomMoldVendor'], neuroSurgeryLhh['NeurosurgerySpineImplants'], neuroSurgeryLhh['NeurosurgeryImplantOther'], neuroSurgeryLhh['NeurosurgeryLabRequests'], neuroSurgeryLhh['NeurosurgeryPathology'], neuroSurgeryLhh['NeurosurgeryLabRequestsOther'], neuroSurgeryLhh['NeurosurgeryPositioningDevices'], neuroSurgeryLhh['allen_table_4_post_'], neuroSurgeryLhh['allen_table_flat'], neuroSurgeryLhh['allen_table_mayfield_attachment'], neuroSurgeryLhh['Neurosurgeryaxillary_roll'], neuroSurgeryLhh['Neurosurgerybean_bag'], neuroSurgeryLhh['Neurosurgerybolster'], neuroSurgeryLhh['Neurosurgerychest_rolls'], neuroSurgeryLhh['Neurosurgerychin_strap'], neuroSurgeryLhh['Neurosurgerydora_luna_head_holder'], neuroSurgeryLhh['Neurosurgerydonut'], neuroSurgeryLhh['Neurosurgerygardner_well_tongs'], neuroSurgeryLhh['Neurosurgeryhorshoe_shoe_mayfield_head_holder'], neuroSurgeryLhh['Neurosurgeryjackson_table_4_post'], neuroSurgeryLhh['Neurosurgeryjackson_tale_flat'], neuroSurgeryLhh['Neurosurgerylateral_arm_board'], neuroSurgeryLhh['Neurosurgerysugita_head_holder_'], neuroSurgeryLhh['Neurosurgeryskull_clamps_mayfield_head_holder'], neuroSurgeryLhh['Neurosurgerywilson_frame'], neuroSurgeryLhh['NeurosurgeryWeight'], neuroSurgeryLhh['NeurosurgeryPositioningDevicesOther'], neuroSurgeryLhh['NeurosurgeryMedication'], neuroSurgeryLhh['exparel_needs_to_go_to_pharmacy'], neuroSurgeryLhh['gleolan'], neuroSurgeryLhh['manitolol_needs_to_go_to_pharmacy'], neuroSurgeryLhh['Neurosurgerymethylene_blue'], neuroSurgeryLhh['NeurosurgeryMedicationOther'], neuroSurgeryLhh['NeurosurgeryLoaners'], neuroSurgeryLhh['NeurosurgeryLoanersVendor'],neuroSurgeryLhh['NeurosurgeryTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO neuroSurgeryLhh (serviceRequest_mongo_id, serviceRequestId, NeurosurgeryBiologicsTissue, NeurosurgeryAlloderm, NeurosurgeryAllodermThicknessSize, NeurosurgeryInfuse, NeurosurgeryInfuseSize, NeurosurgeryAllograftBone, NeurosurgeryFrozenTissue, NeurosurgeryNerveGraft, NeurosurgeryBiologicsTissueOther, NeurosurgeryEquipment, artemis_machine, aquamantys, doppler_9_3, doppler_transflow, Neurosurgerymicro_doppler, Neurosurgerynim_machine, neuro_surgical_chair, Neurosurgerystryker_navigation, Neurosurgerystryker_video_tower, Neurosurgerystortz_video_tower, Neurosurgerystryker_core_drill_saw, Neurosurgeryultrasound, NeurosurgeryMicroscope, NeurosurgeryEquipmentOther, NeurosurgeryImagingSupportService, NeurosurgeryXRays, NeurosurgeryImagingSupportServiceOther, NeurosurgeryImplant, boston_scientific_material_for_dbs, fhc_materials_for_dbs, Neurosurgerynerve_graft, NeurosurgeryCustomMold, NeurosurgeryCustomMoldVendor, NeurosurgerySpineImplants, NeurosurgeryImplantOther, NeurosurgeryLabRequests, NeurosurgeryPathology, NeurosurgeryLabRequestsOther, NeurosurgeryPositioningDevices, allen_table_4_post_, allen_table_flat, allen_table_mayfield_attachment, Neurosurgeryaxillary_roll, Neurosurgerybean_bag, Neurosurgerybolster, Neurosurgerychest_rolls, Neurosurgerychin_strap, Neurosurgerydora_luna_head_holder, Neurosurgerydonut, Neurosurgerygardner_well_tongs, Neurosurgeryhorshoe_shoe_mayfield_head_holder, Neurosurgeryjackson_table_4_post, Neurosurgeryjackson_tale_flat, Neurosurgerylateral_arm_board, Neurosurgerysugita_head_holder_, Neurosurgeryskull_clamps_mayfield_head_holder, Neurosurgerywilson_frame, NeurosurgeryWeight, NeurosurgeryPositioningDevicesOther, NeurosurgeryMedication, exparel_needs_to_go_to_pharmacy, gleolan, manitolol_needs_to_go_to_pharmacy, Neurosurgerymethylene_blue, NeurosurgeryMedicationOther, NeurosurgeryLoaners, NeurosurgeryLoanersVendor, NeurosurgeryTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table neuroSurgeryLhh")
        mysql_connection.commit()

def updateneuroSurgeryLhh(mongo_id , serviceRequestId ,neuroSurgeryLhh):
        print(f"Inside updateneuroSurgeryLhh to update document in neuroSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE neuroSurgeryLhh SET serviceRequestId = %s,NeurosurgeryBiologicsTissue = %s, NeurosurgeryAlloderm = %s, NeurosurgeryAllodermThicknessSize = %s, NeurosurgeryInfuse = %s, NeurosurgeryInfuseSize = %s, NeurosurgeryAllograftBone = %s, NeurosurgeryFrozenTissue = %s, NeurosurgeryNerveGraft = %s, NeurosurgeryBiologicsTissueOther = %s, NeurosurgeryEquipment = %s, artemis_machine = %s, aquamantys = %s, doppler_9_3 = %s, doppler_transflow = %s, Neurosurgerymicro_doppler = %s, Neurosurgerynim_machine = %s, neuro_surgical_chair = %s, Neurosurgerystryker_navigation = %s, Neurosurgerystryker_video_tower = %s, Neurosurgerystortz_video_tower = %s, Neurosurgerystryker_core_drill_saw = %s, Neurosurgeryultrasound = %s, NeurosurgeryMicroscope = %s, NeurosurgeryEquipmentOther = %s, NeurosurgeryImagingSupportService = %s, NeurosurgeryXRays = %s, NeurosurgeryImagingSupportServiceOther = %s, NeurosurgeryImplant = %s, boston_scientific_material_for_dbs = %s, fhc_materials_for_dbs = %s, Neurosurgerynerve_graft = %s, NeurosurgeryCustomMold = %s, NeurosurgeryCustomMoldVendor = %s, NeurosurgerySpineImplants = %s, NeurosurgeryImplantOther = %s, NeurosurgeryLabRequests = %s, NeurosurgeryPathology = %s, NeurosurgeryLabRequestsOther = %s, NeurosurgeryPositioningDevices = %s, allen_table_4_post_ = %s, allen_table_flat = %s, allen_table_mayfield_attachment = %s, Neurosurgeryaxillary_roll = %s, Neurosurgerybean_bag = %s, Neurosurgerybolster = %s, Neurosurgerychest_rolls = %s, Neurosurgerychin_strap = %s, Neurosurgerydora_luna_head_holder = %s, Neurosurgerydonut = %s, Neurosurgerygardner_well_tongs = %s, Neurosurgeryhorshoe_shoe_mayfield_head_holder = %s, Neurosurgeryjackson_table_4_post = %s, Neurosurgeryjackson_tale_flat = %s, Neurosurgerylateral_arm_board = %s, Neurosurgerysugita_head_holder_ = %s, Neurosurgeryskull_clamps_mayfield_head_holder = %s, Neurosurgerywilson_frame = %s, NeurosurgeryWeight = %s, NeurosurgeryPositioningDevicesOther = %s, NeurosurgeryMedication = %s, exparel_needs_to_go_to_pharmacy = %s, gleolan = %s, manitolol_needs_to_go_to_pharmacy = %s, Neurosurgerymethylene_blue = %s, NeurosurgeryMedicationOther = %s, NeurosurgeryLoaners = %s, NeurosurgeryLoanersVendor = %s, NeurosurgeryTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, neuroSurgeryLhh['NeurosurgeryBiologicsTissue'], neuroSurgeryLhh['NeurosurgeryAlloderm'], neuroSurgeryLhh['NeurosurgeryAllodermThicknessSize'], neuroSurgeryLhh['NeurosurgeryInfuse'], neuroSurgeryLhh['NeurosurgeryInfuseSize'], neuroSurgeryLhh['NeurosurgeryAllograftBone'], neuroSurgeryLhh['NeurosurgeryFrozenTissue'], neuroSurgeryLhh['NeurosurgeryNerveGraft'], neuroSurgeryLhh['NeurosurgeryBiologicsTissueOther'], neuroSurgeryLhh['NeurosurgeryEquipment'], neuroSurgeryLhh['artemis_machine'], neuroSurgeryLhh['aquamantys'], neuroSurgeryLhh['doppler_9_3'], neuroSurgeryLhh['doppler_transflow'], neuroSurgeryLhh['Neurosurgerymicro_doppler'], neuroSurgeryLhh['Neurosurgerynim_machine'], neuroSurgeryLhh['neuro_surgical_chair'], neuroSurgeryLhh['Neurosurgerystryker_navigation'], neuroSurgeryLhh['Neurosurgerystryker_video_tower'], neuroSurgeryLhh['Neurosurgerystortz_video_tower'], neuroSurgeryLhh['Neurosurgerystryker_core_drill_saw'], neuroSurgeryLhh['Neurosurgeryultrasound'], neuroSurgeryLhh['NeurosurgeryMicroscope'], neuroSurgeryLhh['NeurosurgeryEquipmentOther'], neuroSurgeryLhh['NeurosurgeryImagingSupportService'], neuroSurgeryLhh['NeurosurgeryXRays'], neuroSurgeryLhh['NeurosurgeryImagingSupportServiceOther'], neuroSurgeryLhh['NeurosurgeryImplant'], neuroSurgeryLhh['boston_scientific_material_for_dbs'], neuroSurgeryLhh['fhc_materials_for_dbs'], neuroSurgeryLhh['Neurosurgerynerve_graft'], neuroSurgeryLhh['NeurosurgeryCustomMold'], neuroSurgeryLhh['NeurosurgeryCustomMoldVendor'], neuroSurgeryLhh['NeurosurgerySpineImplants'], neuroSurgeryLhh['NeurosurgeryImplantOther'], neuroSurgeryLhh['NeurosurgeryLabRequests'], neuroSurgeryLhh['NeurosurgeryPathology'], neuroSurgeryLhh['NeurosurgeryLabRequestsOther'], neuroSurgeryLhh['NeurosurgeryPositioningDevices'], neuroSurgeryLhh['allen_table_4_post_'], neuroSurgeryLhh['allen_table_flat'], neuroSurgeryLhh['allen_table_mayfield_attachment'], neuroSurgeryLhh['Neurosurgeryaxillary_roll'], neuroSurgeryLhh['Neurosurgerybean_bag'], neuroSurgeryLhh['Neurosurgerybolster'], neuroSurgeryLhh['Neurosurgerychest_rolls'], neuroSurgeryLhh['Neurosurgerychin_strap'], neuroSurgeryLhh['Neurosurgerydora_luna_head_holder'], neuroSurgeryLhh['Neurosurgerydonut'], neuroSurgeryLhh['Neurosurgerygardner_well_tongs'], neuroSurgeryLhh['Neurosurgeryhorshoe_shoe_mayfield_head_holder'], neuroSurgeryLhh['Neurosurgeryjackson_table_4_post'], neuroSurgeryLhh['Neurosurgeryjackson_tale_flat'], neuroSurgeryLhh['Neurosurgerylateral_arm_board'], neuroSurgeryLhh['Neurosurgerysugita_head_holder_'], neuroSurgeryLhh['Neurosurgeryskull_clamps_mayfield_head_holder'], neuroSurgeryLhh['Neurosurgerywilson_frame'], neuroSurgeryLhh['NeurosurgeryWeight'], neuroSurgeryLhh['NeurosurgeryPositioningDevicesOther'], neuroSurgeryLhh['NeurosurgeryMedication'], neuroSurgeryLhh['exparel_needs_to_go_to_pharmacy'], neuroSurgeryLhh['gleolan'], neuroSurgeryLhh['manitolol_needs_to_go_to_pharmacy'], neuroSurgeryLhh['Neurosurgerymethylene_blue'], neuroSurgeryLhh['NeurosurgeryMedicationOther'], neuroSurgeryLhh['NeurosurgeryLoaners'], neuroSurgeryLhh['NeurosurgeryLoanersVendor'],neuroSurgeryLhh['NeurosurgeryTrayRequested'],mongo_id))
        print(f"Updated document in neuroSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()




def insertorthoSpineLhh(mongo_id , serviceRequestId ,orthoSpineLhh):
        print(f"Inside insertorthoSpineLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS orthoSpineLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,OrthoBiologicsTissue TEXT, crushed_cancellous_chips TEXT, crushed_cancellous_fine TEXT, dbx TEXT, fem_ring_allograft_freeze_dried TEXT, grafton_putty TEXT, Orthoinfuse TEXT, i_c_graft_chamber TEXT, osteotech_cervical TEXT, vg1c_cervical_bone TEXT, vg2c_cervical_bone TEXT, OrthoBiologicsTissueOther TEXT, OrthoEquipment TEXT, Orthoaquamantys TEXT, Orthocell_saver TEXT, Orthomicroscope TEXT, Orthosecond_bovie TEXT, OrthoEquipmentOther TEXT, OrthoImagingSupportServices TEXT, OrthoXRays TEXT, OrthoImagingSupportServicesOther TEXT, OrthoInstrumentationImplants TEXT, OrthoRegion TEXT, OrthoCervicalAnterior TEXT, OrthoLUMBARTHORACICANTERIOR TEXT, OrthoLUMBARTHORACICPOSTERIOR TEXT, OrthoINTERBODYCAGES TEXT, OrthoCERVICALPOSTERIOR TEXT, OrthoOTHERS TEXT, OrthoSystem TEXT, OrthoInstrumentationImplantsOther TEXT, OrthoLabRequests TEXT, OrthoPathology TEXT, OrthoLabRequestsOther TEXT, OrthoPositioningDevices TEXT, amsco_steris_bed__4_post TEXT, amsco_steris_bed__flat TEXT, Orthobolster TEXT, Orthochest_rolls TEXT, Orthochin_strap TEXT, extra_large_4_post TEXT, Orthogardner_well_tongs TEXT, Orthojackson_table__4_post TEXT, Orthojackson_table__flat TEXT, Orthojackson_table__wilson_frame TEXT, Orthomaquet_bed__4_post TEXT, Orthomaquet_bed__flat TEXT, Orthomaquet_bed__wilson_frame TEXT, mayfield_for_jackson TEXT, mayfield_horse TEXT, mayfield_skull_pins TEXT, Orthoweights TEXT, OrthoPositioningDevicesOther TEXT, OrthoSupplies TEXT, OrthoOnQPump TEXT, OrthoSuppliesOther TEXT, OrthoOther TEXT, OrthoAnteriorPosterior TEXT, OrthoWhichIspart1 TEXT, OrthoAssistantSurgeon TEXT, OrthoHardwareBeingRemoved TEXT, OrthoOtherVendor TEXT, OrthoLoaners TEXT, OrthoLoanersVendor TEXT, OrthoTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, orthoSpineLhh['OrthoBiologicsTissue'], orthoSpineLhh['crushed_cancellous_chips'], orthoSpineLhh['crushed_cancellous_fine'], orthoSpineLhh['dbx'], orthoSpineLhh['fem_ring_allograft_freeze_dried'], orthoSpineLhh['grafton_putty'], orthoSpineLhh['Orthoinfuse'], orthoSpineLhh['i_c_graft_chamber'], orthoSpineLhh['osteotech_cervical'], orthoSpineLhh['vg1c_cervical_bone'], orthoSpineLhh['vg2c_cervical_bone'], orthoSpineLhh['OrthoBiologicsTissueOther'], orthoSpineLhh['OrthoEquipment'], orthoSpineLhh['Orthoaquamantys'], orthoSpineLhh['Orthocell_saver'], orthoSpineLhh['Orthomicroscope'], orthoSpineLhh['Orthosecond_bovie'], orthoSpineLhh['OrthoEquipmentOther'], orthoSpineLhh['OrthoImagingSupportServices'], orthoSpineLhh['OrthoXRays'], orthoSpineLhh['OrthoImagingSupportServicesOther'], orthoSpineLhh['OrthoInstrumentationImplants'], orthoSpineLhh['OrthoRegion'], orthoSpineLhh['OrthoCervicalAnterior'], orthoSpineLhh['OrthoLUMBARTHORACICANTERIOR'], orthoSpineLhh['OrthoLUMBARTHORACICPOSTERIOR'], orthoSpineLhh['OrthoINTERBODYCAGES'], orthoSpineLhh['OrthoCERVICALPOSTERIOR'], orthoSpineLhh['OrthoOTHERS'], orthoSpineLhh['OrthoSystem'], orthoSpineLhh['OrthoInstrumentationImplantsOther'], orthoSpineLhh['OrthoLabRequests'], orthoSpineLhh['OrthoPathology'], orthoSpineLhh['OrthoLabRequestsOther'], orthoSpineLhh['OrthoPositioningDevices'], orthoSpineLhh['amsco_steris_bed__4_post'], orthoSpineLhh['amsco_steris_bed__flat'], orthoSpineLhh['Orthobolster'], orthoSpineLhh['Orthochest_rolls'], orthoSpineLhh['Orthochin_strap'], orthoSpineLhh['extra_large_4_post'], orthoSpineLhh['Orthogardner_well_tongs'], orthoSpineLhh['Orthojackson_table__4_post'], orthoSpineLhh['Orthojackson_table__flat'], orthoSpineLhh['Orthojackson_table__wilson_frame'], orthoSpineLhh['Orthomaquet_bed__4_post'], orthoSpineLhh['Orthomaquet_bed__flat'], orthoSpineLhh['Orthomaquet_bed__wilson_frame'], orthoSpineLhh['mayfield_for_jackson'], orthoSpineLhh['mayfield_horse'], orthoSpineLhh['mayfield_skull_pins'], orthoSpineLhh['Orthoweights'], orthoSpineLhh['OrthoPositioningDevicesOther'], orthoSpineLhh['OrthoSupplies'], orthoSpineLhh['OrthoOnQPump'], orthoSpineLhh['OrthoSuppliesOther'], orthoSpineLhh['OrthoOther'], orthoSpineLhh['OrthoAnteriorPosterior'], orthoSpineLhh['OrthoWhichIspart1'], orthoSpineLhh['OrthoAssistantSurgeon'], orthoSpineLhh['OrthoHardwareBeingRemoved'], orthoSpineLhh['OrthoOtherVendor'], orthoSpineLhh['OrthoLoaners'], orthoSpineLhh['OrthoLoanersVendor'], orthoSpineLhh['OrthoTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO orthoSpineLhh (serviceRequest_mongo_id, serviceRequestId,OrthoBiologicsTissue,crushed_cancellous_chips,crushed_cancellous_fine,dbx,fem_ring_allograft_freeze_dried,grafton_putty,Orthoinfuse,i_c_graft_chamber,osteotech_cervical,vg1c_cervical_bone,vg2c_cervical_bone,OrthoBiologicsTissueOther,OrthoEquipment,Orthoaquamantys,Orthocell_saver,Orthomicroscope,Orthosecond_bovie,OrthoEquipmentOther,OrthoImagingSupportServices,OrthoXRays,OrthoImagingSupportServicesOther,OrthoInstrumentationImplants,OrthoRegion,OrthoCervicalAnterior,OrthoLUMBARTHORACICANTERIOR,OrthoLUMBARTHORACICPOSTERIOR,OrthoINTERBODYCAGES,OrthoCERVICALPOSTERIOR,OrthoOTHERS,OrthoSystem,OrthoInstrumentationImplantsOther,OrthoLabRequests,OrthoPathology,OrthoLabRequestsOther,OrthoPositioningDevices,amsco_steris_bed__4_post,amsco_steris_bed__flat,Orthobolster,Orthochest_rolls,Orthochin_strap,extra_large_4_post,Orthogardner_well_tongs,Orthojackson_table__4_post,Orthojackson_table__flat,Orthojackson_table__wilson_frame,Orthomaquet_bed__4_post,Orthomaquet_bed__flat,Orthomaquet_bed__wilson_frame,mayfield_for_jackson,mayfield_horse,mayfield_skull_pins,Orthoweights,OrthoPositioningDevicesOther,OrthoSupplies,OrthoOnQPump,OrthoSuppliesOther,OrthoOther,OrthoAnteriorPosterior,OrthoWhichIspart1,OrthoAssistantSurgeon,OrthoHardwareBeingRemoved,OrthoOtherVendor,OrthoLoaners,OrthoLoanersVendor,OrthoTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table orthoSpineLhh")
        mysql_connection.commit()

def updateorthoSpineLhh(mongo_id , serviceRequestId ,orthoSpineLhh):
        print(f"Inside updateorthoSpineLhh to update document in orthoSpineLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE orthoSpineLhh SET serviceRequestId = %s ,OrthoBiologicsTissue = %s,crushed_cancellous_chips = %s,crushed_cancellous_fine = %s,dbx = %s,fem_ring_allograft_freeze_dried = %s,grafton_putty = %s,Orthoinfuse = %s,i_c_graft_chamber = %s,osteotech_cervical = %s,vg1c_cervical_bone = %s,vg2c_cervical_bone = %s,OrthoBiologicsTissueOther = %s,OrthoEquipment = %s,Orthoaquamantys = %s,Orthocell_saver = %s,Orthomicroscope = %s,Orthosecond_bovie = %s,OrthoEquipmentOther = %s,OrthoImagingSupportServices = %s,OrthoXRays = %s,OrthoImagingSupportServicesOther = %s,OrthoInstrumentationImplants = %s,OrthoRegion = %s,OrthoCervicalAnterior = %s,OrthoLUMBARTHORACICANTERIOR = %s,OrthoLUMBARTHORACICPOSTERIOR = %s,OrthoINTERBODYCAGES = %s,OrthoCERVICALPOSTERIOR = %s,OrthoOTHERS = %s,OrthoSystem = %s,OrthoInstrumentationImplantsOther = %s,OrthoLabRequests = %s,OrthoPathology = %s,OrthoLabRequestsOther = %s,OrthoPositioningDevices = %s,amsco_steris_bed__4_post = %s,amsco_steris_bed__flat = %s,Orthobolster = %s,Orthochest_rolls = %s,Orthochin_strap = %s,extra_large_4_post = %s,Orthogardner_well_tongs = %s,Orthojackson_table__4_post = %s,Orthojackson_table__flat = %s,Orthojackson_table__wilson_frame = %s,Orthomaquet_bed__4_post = %s,Orthomaquet_bed__flat = %s,Orthomaquet_bed__wilson_frame = %s,mayfield_for_jackson = %s,mayfield_horse = %s,mayfield_skull_pins = %s,Orthoweights = %s,OrthoPositioningDevicesOther = %s,OrthoSupplies = %s,OrthoOnQPump = %s,OrthoSuppliesOther = %s,OrthoOther = %s,OrthoAnteriorPosterior = %s,OrthoWhichIspart1 = %s,OrthoAssistantSurgeon = %s,OrthoHardwareBeingRemoved = %s,OrthoOtherVendor = %s,OrthoLoaners = %s,OrthoLoanersVendor = %s,OrthoTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, orthoSpineLhh['OrthoBiologicsTissue'], orthoSpineLhh['crushed_cancellous_chips'], orthoSpineLhh['crushed_cancellous_fine'], orthoSpineLhh['dbx'], orthoSpineLhh['fem_ring_allograft_freeze_dried'], orthoSpineLhh['grafton_putty'], orthoSpineLhh['Orthoinfuse'], orthoSpineLhh['i_c_graft_chamber'], orthoSpineLhh['osteotech_cervical'], orthoSpineLhh['vg1c_cervical_bone'], orthoSpineLhh['vg2c_cervical_bone'], orthoSpineLhh['OrthoBiologicsTissueOther'], orthoSpineLhh['OrthoEquipment'], orthoSpineLhh['Orthoaquamantys'], orthoSpineLhh['Orthocell_saver'], orthoSpineLhh['Orthomicroscope'], orthoSpineLhh['Orthosecond_bovie'], orthoSpineLhh['OrthoEquipmentOther'], orthoSpineLhh['OrthoImagingSupportServices'], orthoSpineLhh['OrthoXRays'], orthoSpineLhh['OrthoImagingSupportServicesOther'], orthoSpineLhh['OrthoInstrumentationImplants'], orthoSpineLhh['OrthoRegion'], orthoSpineLhh['OrthoCervicalAnterior'], orthoSpineLhh['OrthoLUMBARTHORACICANTERIOR'], orthoSpineLhh['OrthoLUMBARTHORACICPOSTERIOR'], orthoSpineLhh['OrthoINTERBODYCAGES'], orthoSpineLhh['OrthoCERVICALPOSTERIOR'], orthoSpineLhh['OrthoOTHERS'], orthoSpineLhh['OrthoSystem'], orthoSpineLhh['OrthoInstrumentationImplantsOther'], orthoSpineLhh['OrthoLabRequests'], orthoSpineLhh['OrthoPathology'], orthoSpineLhh['OrthoLabRequestsOther'], orthoSpineLhh['OrthoPositioningDevices'], orthoSpineLhh['amsco_steris_bed__4_post'], orthoSpineLhh['amsco_steris_bed__flat'], orthoSpineLhh['Orthobolster'], orthoSpineLhh['Orthochest_rolls'], orthoSpineLhh['Orthochin_strap'], orthoSpineLhh['extra_large_4_post'], orthoSpineLhh['Orthogardner_well_tongs'], orthoSpineLhh['Orthojackson_table__4_post'], orthoSpineLhh['Orthojackson_table__flat'], orthoSpineLhh['Orthojackson_table__wilson_frame'], orthoSpineLhh['Orthomaquet_bed__4_post'], orthoSpineLhh['Orthomaquet_bed__flat'], orthoSpineLhh['Orthomaquet_bed__wilson_frame'], orthoSpineLhh['mayfield_for_jackson'], orthoSpineLhh['mayfield_horse'], orthoSpineLhh['mayfield_skull_pins'], orthoSpineLhh['Orthoweights'], orthoSpineLhh['OrthoPositioningDevicesOther'], orthoSpineLhh['OrthoSupplies'], orthoSpineLhh['OrthoOnQPump'], orthoSpineLhh['OrthoSuppliesOther'], orthoSpineLhh['OrthoOther'], orthoSpineLhh['OrthoAnteriorPosterior'], orthoSpineLhh['OrthoWhichIspart1'], orthoSpineLhh['OrthoAssistantSurgeon'], orthoSpineLhh['OrthoHardwareBeingRemoved'], orthoSpineLhh['OrthoOtherVendor'], orthoSpineLhh['OrthoLoaners'], orthoSpineLhh['OrthoLoanersVendor'], orthoSpineLhh['OrthoTrayRequested'],mongo_id))
        print(f"Updated document in orthoSpineLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def insertplasticsLhh(mongo_id , serviceRequestId ,plasticsLhh):
        print(f"Inside insertplasticsLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS plasticsLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,PlasticBiologicsTissue TEXT,PlasticAlloderm TEXT,PlasticAllodermSizeThickness TEXT,PlasticStrattice TEXT,PlasticStratticeSizeTickness TEXT,PlasticStratafix TEXT,PlasticStratafixSizeThickness TEXT,PlasticPhasixMesh TEXT,PlasticListOfMeshes TEXT,PlasticPhasixMeshOther TEXT,PlasticEquipment TEXT,Plasticcentrifuge TEXT,Plasticcook_doppler TEXT,Plasticfluid_warmer TEXT,Plasticgem_flow_coupler_monitor TEXT,Plastichand_table TEXT,Plastickoven_doppler TEXT,Plasticliposuction_machine TEXT,Plasticpal TEXT,Plasticmicroaire_machine TEXT,Plasticscale TEXT,Plasticsitting_chair TEXT,Plasticsmoke_evacuator TEXT,Plasticwaterbath TEXT,Plasticwound_vac_machine TEXT,PlasticFatHarvestingSystem TEXT,PlasticInfiltrationPump TEXT,PlasticMicroscope TEXT,PlasticNumberOfBackTables TEXT,PlasticEquipmentOther TEXT,PlasticImagingSupportServices TEXT,PlasticXRays TEXT,PlasticImagingSupportServicesOther TEXT,PlasticImplants TEXT,PlasticImplantType TEXT,PlasticDetail TEXT,PlasticImplantsSizeQuantity TEXT,PlasticImplantsVendorPartNo TEXT,PlasticInstrumentation TEXT,Plasticflap_disection_tray TEXT,Plastichunstead_needle TEXT,Plasticled_hand TEXT,Plasticmammoplasty_tray TEXT,Plasticpal_lipo_cannulas TEXT,Plasticplastic_micro_inst TEXT,Plasticzimmer_dermatome TEXT,Plasticzimmer_mesher TEXT,PlasticInstrumentationOther TEXT,PlasticLabRequests TEXT,PlasticPathology TEXT,PlasticPositioningDevices TEXT,Plasticallen_stirups TEXT,Plasticpink_positioning_pads TEXT,PlasticBearHugger TEXT,PlasticPositioningDevicesOther TEXT,PlasticSupplies TEXT,Plasticabdominal_binder TEXT,Plasticprevena TEXT,Plasticwound_vac TEXT,PlasticSurgiBra TEXT,PlasticSuppliesOther TEXT,PlasticLoaners TEXT,PlasticLoanersVendor TEXT,PlasticTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, plasticsLhh['PlasticBiologicsTissue'], plasticsLhh['PlasticAlloderm'], plasticsLhh['PlasticAllodermSizeThickness'], plasticsLhh['PlasticStrattice'], plasticsLhh['PlasticStratticeSizeTickness'], plasticsLhh['PlasticStratafix'], plasticsLhh['PlasticStratafixSizeThickness'], plasticsLhh['PlasticPhasixMesh'], plasticsLhh['PlasticListOfMeshes'], plasticsLhh['PlasticPhasixMeshOther'], plasticsLhh['PlasticEquipment'], plasticsLhh['Plasticcentrifuge'], plasticsLhh['Plasticcook_doppler'], plasticsLhh['Plasticfluid_warmer'], plasticsLhh['Plasticgem_flow_coupler_monitor'], plasticsLhh['Plastichand_table'], plasticsLhh['Plastickoven_doppler'], plasticsLhh['Plasticliposuction_machine'], plasticsLhh['Plasticpal'], plasticsLhh['Plasticmicroaire_machine'], plasticsLhh['Plasticscale'], plasticsLhh['Plasticsitting_chair'], plasticsLhh['Plasticsmoke_evacuator'], plasticsLhh['Plasticwaterbath'], plasticsLhh['Plasticwound_vac_machine'], plasticsLhh['PlasticFatHarvestingSystem'], plasticsLhh['PlasticInfiltrationPump'], plasticsLhh['PlasticMicroscope'], plasticsLhh['PlasticNumberOfBackTables'], plasticsLhh['PlasticEquipmentOther'], plasticsLhh['PlasticImagingSupportServices'], plasticsLhh['PlasticXRays'], plasticsLhh['PlasticImagingSupportServicesOther'], plasticsLhh['PlasticImplants'], plasticsLhh['PlasticImplantType'], plasticsLhh['PlasticDetail'], plasticsLhh['PlasticImplantsSizeQuantity'], plasticsLhh['PlasticImplantsVendorPartNo'], plasticsLhh['PlasticInstrumentation'], plasticsLhh['Plasticflap_disection_tray'], plasticsLhh['Plastichunstead_needle'], plasticsLhh['Plasticled_hand'], plasticsLhh['Plasticmammoplasty_tray'], plasticsLhh['Plasticpal_lipo_cannulas'], plasticsLhh['Plasticplastic_micro_inst'], plasticsLhh['Plasticzimmer_dermatome'], plasticsLhh['Plasticzimmer_mesher'], plasticsLhh['PlasticInstrumentationOther'], plasticsLhh['PlasticLabRequests'], plasticsLhh['PlasticPathology'], plasticsLhh['PlasticPositioningDevices'], plasticsLhh['Plasticallen_stirups'], plasticsLhh['Plasticpink_positioning_pads'], plasticsLhh['PlasticBearHugger'], plasticsLhh['PlasticPositioningDevicesOther'], plasticsLhh['PlasticSupplies'], plasticsLhh['Plasticabdominal_binder'], plasticsLhh['Plasticprevena'], plasticsLhh['Plasticwound_vac'], plasticsLhh['PlasticSurgiBra'], plasticsLhh['PlasticSuppliesOther'], plasticsLhh['PlasticLoaners'], plasticsLhh['PlasticLoanersVendor'], plasticsLhh['PlasticTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO plasticsLhh (serviceRequest_mongo_id, serviceRequestId,PlasticBiologicsTissue,PlasticAlloderm,PlasticAllodermSizeThickness,PlasticStrattice,PlasticStratticeSizeTickness,PlasticStratafix,PlasticStratafixSizeThickness,PlasticPhasixMesh,PlasticListOfMeshes,PlasticPhasixMeshOther,PlasticEquipment,Plasticcentrifuge,Plasticcook_doppler,Plasticfluid_warmer,Plasticgem_flow_coupler_monitor,Plastichand_table,Plastickoven_doppler,Plasticliposuction_machine,Plasticpal,Plasticmicroaire_machine,Plasticscale,Plasticsitting_chair,Plasticsmoke_evacuator,Plasticwaterbath,Plasticwound_vac_machine,PlasticFatHarvestingSystem,PlasticInfiltrationPump,PlasticMicroscope,PlasticNumberOfBackTables,PlasticEquipmentOther,PlasticImagingSupportServices,PlasticXRays,PlasticImagingSupportServicesOther,PlasticImplants,PlasticImplantType,PlasticDetail,PlasticImplantsSizeQuantity,PlasticImplantsVendorPartNo,PlasticInstrumentation,Plasticflap_disection_tray,Plastichunstead_needle,Plasticled_hand,Plasticmammoplasty_tray,Plasticpal_lipo_cannulas,Plasticplastic_micro_inst,Plasticzimmer_dermatome,Plasticzimmer_mesher,PlasticInstrumentationOther,PlasticLabRequests,PlasticPathology,PlasticPositioningDevices,Plasticallen_stirups,Plasticpink_positioning_pads,PlasticBearHugger,PlasticPositioningDevicesOther,PlasticSupplies,Plasticabdominal_binder,Plasticprevena,Plasticwound_vac,PlasticSurgiBra,PlasticSuppliesOther,PlasticLoaners,PlasticLoanersVendor,PlasticTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table plasticsLhh")
        mysql_connection.commit()

def updateplasticsLhh(mongo_id , serviceRequestId ,plasticsLhh):
        print(f"Inside updateplasticsLhh to update document in plasticsLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE plasticsLhh SET serviceRequestId = %s ,PlasticBiologicsTissue = %s, PlasticAlloderm = %s, PlasticAllodermSizeThickness = %s, PlasticStrattice = %s, PlasticStratticeSizeTickness = %s, PlasticStratafix = %s, PlasticStratafixSizeThickness = %s, PlasticPhasixMesh = %s, PlasticListOfMeshes = %s, PlasticPhasixMeshOther = %s, PlasticEquipment = %s, Plasticcentrifuge = %s, Plasticcook_doppler = %s, Plasticfluid_warmer = %s, Plasticgem_flow_coupler_monitor = %s, Plastichand_table = %s, Plastickoven_doppler = %s, Plasticliposuction_machine = %s, Plasticpal = %s, Plasticmicroaire_machine = %s, Plasticscale = %s, Plasticsitting_chair = %s, Plasticsmoke_evacuator = %s, Plasticwaterbath = %s, Plasticwound_vac_machine = %s, PlasticFatHarvestingSystem = %s, PlasticInfiltrationPump = %s, PlasticMicroscope = %s, PlasticNumberOfBackTables = %s, PlasticEquipmentOther = %s, PlasticImagingSupportServices = %s, PlasticXRays = %s, PlasticImagingSupportServicesOther = %s, PlasticImplants = %s, PlasticImplantType = %s, PlasticDetail = %s, PlasticImplantsSizeQuantity = %s, PlasticImplantsVendorPartNo = %s, PlasticInstrumentation = %s, Plasticflap_disection_tray = %s, Plastichunstead_needle = %s, Plasticled_hand = %s, Plasticmammoplasty_tray = %s, Plasticpal_lipo_cannulas = %s, Plasticplastic_micro_inst = %s, Plasticzimmer_dermatome = %s, Plasticzimmer_mesher = %s, PlasticInstrumentationOther = %s, PlasticLabRequests = %s, PlasticPathology = %s, PlasticPositioningDevices = %s, Plasticallen_stirups = %s, Plasticpink_positioning_pads = %s, PlasticBearHugger = %s, PlasticPositioningDevicesOther = %s, PlasticSupplies = %s, Plasticabdominal_binder = %s, Plasticprevena = %s, Plasticwound_vac = %s, PlasticSurgiBra = %s, PlasticSuppliesOther = %s, PlasticLoaners = %s, PlasticLoanersVendor = %s, PlasticTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId, plasticsLhh['PlasticBiologicsTissue'], plasticsLhh['PlasticAlloderm'], plasticsLhh['PlasticAllodermSizeThickness'], plasticsLhh['PlasticStrattice'], plasticsLhh['PlasticStratticeSizeTickness'], plasticsLhh['PlasticStratafix'], plasticsLhh['PlasticStratafixSizeThickness'], plasticsLhh['PlasticPhasixMesh'], plasticsLhh['PlasticListOfMeshes'], plasticsLhh['PlasticPhasixMeshOther'], plasticsLhh['PlasticEquipment'], plasticsLhh['Plasticcentrifuge'], plasticsLhh['Plasticcook_doppler'], plasticsLhh['Plasticfluid_warmer'], plasticsLhh['Plasticgem_flow_coupler_monitor'], plasticsLhh['Plastichand_table'], plasticsLhh['Plastickoven_doppler'], plasticsLhh['Plasticliposuction_machine'], plasticsLhh['Plasticpal'], plasticsLhh['Plasticmicroaire_machine'], plasticsLhh['Plasticscale'], plasticsLhh['Plasticsitting_chair'], plasticsLhh['Plasticsmoke_evacuator'], plasticsLhh['Plasticwaterbath'], plasticsLhh['Plasticwound_vac_machine'], plasticsLhh['PlasticFatHarvestingSystem'], plasticsLhh['PlasticInfiltrationPump'], plasticsLhh['PlasticMicroscope'], plasticsLhh['PlasticNumberOfBackTables'], plasticsLhh['PlasticEquipmentOther'], plasticsLhh['PlasticImagingSupportServices'], plasticsLhh['PlasticXRays'], plasticsLhh['PlasticImagingSupportServicesOther'], plasticsLhh['PlasticImplants'], plasticsLhh['PlasticImplantType'], plasticsLhh['PlasticDetail'], plasticsLhh['PlasticImplantsSizeQuantity'], plasticsLhh['PlasticImplantsVendorPartNo'], plasticsLhh['PlasticInstrumentation'], plasticsLhh['Plasticflap_disection_tray'], plasticsLhh['Plastichunstead_needle'], plasticsLhh['Plasticled_hand'], plasticsLhh['Plasticmammoplasty_tray'], plasticsLhh['Plasticpal_lipo_cannulas'], plasticsLhh['Plasticplastic_micro_inst'], plasticsLhh['Plasticzimmer_dermatome'], plasticsLhh['Plasticzimmer_mesher'], plasticsLhh['PlasticInstrumentationOther'], plasticsLhh['PlasticLabRequests'], plasticsLhh['PlasticPathology'], plasticsLhh['PlasticPositioningDevices'], plasticsLhh['Plasticallen_stirups'], plasticsLhh['Plasticpink_positioning_pads'], plasticsLhh['PlasticBearHugger'], plasticsLhh['PlasticPositioningDevicesOther'], plasticsLhh['PlasticSupplies'], plasticsLhh['Plasticabdominal_binder'], plasticsLhh['Plasticprevena'], plasticsLhh['Plasticwound_vac'], plasticsLhh['PlasticSurgiBra'], plasticsLhh['PlasticSuppliesOther'], plasticsLhh['PlasticLoaners'], plasticsLhh['PlasticLoanersVendor'], plasticsLhh['PlasticTrayRequested'],mongo_id))
        print(f"Updated document in plasticsLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()



def insertsportsTraumaAndPodiatryLhh(mongo_id , serviceRequestId ,sportsTraumaAndPodiatryLhh):
        print(f"Inside insertsportsTraumaAndPodiatryLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS sportsTraumaAndPodiatryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,SportsBiologicsTissue TEXT, SportsFreezeDried TEXT, SportsFreezeDriedDetail TEXT, SportsBiologicsTissueFrozen TEXT, SportsBiologicsTissueFrozenDetail TEXT, SportsBiologicsTissueOther TEXT, SportsEquipment TEXT, Sportsarthrex_pump TEXT, SportsbeanEquip_bag_half_or_full TEXT, Sportshand_table TEXT, Sportshydraulic_lifter TEXT, Sportshana_table TEXT, Sportslateral_post TEXT, Sportslinvatec_pump TEXT, Sportsmidas_pedal TEXT, SportsEquippegboard TEXT, Sportssmith__nephew_pump TEXT, SportsspiderEquip_arm_positioner TEXT, SportsEquipmentOther TEXT, SportsImagingSupportServices TEXT, SportsXRay TEXT, SportsImagingSupportServicesOther TEXT, SportsImplants TEXT, SportsImplantsVendorName TEXT, SportsArthrex TEXT, SportsDepuyMitek TEXT, SportsHipscopeAnchors TEXT, SportsMeniscalAnchors TEXT, SportsImplantsOther TEXT, SportsInstrumentation TEXT, SportsInstrumentationVendor TEXT, SportsDepuyBiomet TEXT, SportsSN TEXT, SportsStryker TEXT, SportsSynthes TEXT, SportsZimmer TEXT, SportsLabRequests TEXT, SportsPathology TEXT, SportsLabRequestsOther TEXT, SportsPositioningDevices TEXT, Sportsarthrex_trimano_arm TEXT, Sportsarthrex_shoulder_traction_dev TEXT, Sportsamsco_arm_holder TEXT, Sportsbean_bag_half_or_full TEXT, Sportscaptains_chair TEXT, Sportsdyonics_shoulder_traction_dev TEXT, Sportsleg_holder_wcrossbar TEXT, Sportslateral_leg_holder TEXT, Sportspegboard TEXT, Sportssmith__nephew_hip_distractor TEXT, Sportsspider_arm_positioner TEXT, SportsPositioningDevicesOther TEXT, SportsLoaners TEXT, SportsLoanersVendor TEXT, SportsTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, sportsTraumaAndPodiatryLhh['SportsBiologicsTissue'], sportsTraumaAndPodiatryLhh['SportsFreezeDried'], sportsTraumaAndPodiatryLhh['SportsFreezeDriedDetail'], sportsTraumaAndPodiatryLhh['SportsBiologicsTissueFrozen'], sportsTraumaAndPodiatryLhh['SportsBiologicsTissueFrozenDetail'], sportsTraumaAndPodiatryLhh['SportsBiologicsTissueOther'], sportsTraumaAndPodiatryLhh['SportsEquipment'], sportsTraumaAndPodiatryLhh['Sportsarthrex_pump'], sportsTraumaAndPodiatryLhh['SportsbeanEquip_bag_half_or_full'], sportsTraumaAndPodiatryLhh['Sportshand_table'], sportsTraumaAndPodiatryLhh['Sportshydraulic_lifter'], sportsTraumaAndPodiatryLhh['Sportshana_table'], sportsTraumaAndPodiatryLhh['Sportslateral_post'], sportsTraumaAndPodiatryLhh['Sportslinvatec_pump'], sportsTraumaAndPodiatryLhh['Sportsmidas_pedal'], sportsTraumaAndPodiatryLhh['SportsEquippegboard'], sportsTraumaAndPodiatryLhh['Sportssmith__nephew_pump'], sportsTraumaAndPodiatryLhh['SportsspiderEquip_arm_positioner'], sportsTraumaAndPodiatryLhh['SportsEquipmentOther'], sportsTraumaAndPodiatryLhh['SportsImagingSupportServices'], sportsTraumaAndPodiatryLhh['SportsXRay'], sportsTraumaAndPodiatryLhh['SportsImagingSupportServicesOther'], sportsTraumaAndPodiatryLhh['SportsImplants'], sportsTraumaAndPodiatryLhh['SportsImplantsVendorName'], sportsTraumaAndPodiatryLhh['SportsArthrex'], sportsTraumaAndPodiatryLhh['SportsDepuyMitek'], sportsTraumaAndPodiatryLhh['SportsHipscopeAnchors'], sportsTraumaAndPodiatryLhh['SportsMeniscalAnchors'], sportsTraumaAndPodiatryLhh['SportsImplantsOther'], sportsTraumaAndPodiatryLhh['SportsInstrumentation'], sportsTraumaAndPodiatryLhh['SportsInstrumentationVendor'], sportsTraumaAndPodiatryLhh['SportsDepuyBiomet'], sportsTraumaAndPodiatryLhh['SportsSN'], sportsTraumaAndPodiatryLhh['SportsStryker'], sportsTraumaAndPodiatryLhh['SportsSynthes'], sportsTraumaAndPodiatryLhh['SportsZimmer'], sportsTraumaAndPodiatryLhh['SportsLabRequests'], sportsTraumaAndPodiatryLhh['SportsPathology'], sportsTraumaAndPodiatryLhh['SportsLabRequestsOther'], sportsTraumaAndPodiatryLhh['SportsPositioningDevices'], sportsTraumaAndPodiatryLhh['Sportsarthrex_trimano_arm'], sportsTraumaAndPodiatryLhh['Sportsarthrex_shoulder_traction_dev'], sportsTraumaAndPodiatryLhh['Sportsamsco_arm_holder'], sportsTraumaAndPodiatryLhh['Sportsbean_bag_half_or_full'], sportsTraumaAndPodiatryLhh['Sportscaptains_chair'], sportsTraumaAndPodiatryLhh['Sportsdyonics_shoulder_traction_dev'], sportsTraumaAndPodiatryLhh['Sportsleg_holder_wcrossbar'], sportsTraumaAndPodiatryLhh['Sportslateral_leg_holder'], sportsTraumaAndPodiatryLhh['Sportspegboard'], sportsTraumaAndPodiatryLhh['Sportssmith__nephew_hip_distractor'], sportsTraumaAndPodiatryLhh['Sportsspider_arm_positioner'], sportsTraumaAndPodiatryLhh['SportsPositioningDevicesOther'], sportsTraumaAndPodiatryLhh['SportsLoaners'], sportsTraumaAndPodiatryLhh['SportsLoanersVendor'], sportsTraumaAndPodiatryLhh['SportsTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO sportsTraumaAndPodiatryLhh (serviceRequest_mongo_id, serviceRequestId,SportsBiologicsTissue,SportsFreezeDried,SportsFreezeDriedDetail,SportsBiologicsTissueFrozen,SportsBiologicsTissueFrozenDetail,SportsBiologicsTissueOther,SportsEquipment,Sportsarthrex_pump,SportsbeanEquip_bag_half_or_full,Sportshand_table,Sportshydraulic_lifter,Sportshana_table,Sportslateral_post,Sportslinvatec_pump,Sportsmidas_pedal,SportsEquippegboard,Sportssmith__nephew_pump,SportsspiderEquip_arm_positioner,SportsEquipmentOther,SportsImagingSupportServices,SportsXRay,SportsImagingSupportServicesOther,SportsImplants,SportsImplantsVendorName,SportsArthrex,SportsDepuyMitek,SportsHipscopeAnchors,SportsMeniscalAnchors,SportsImplantsOther,SportsInstrumentation,SportsInstrumentationVendor,SportsDepuyBiomet,SportsSN,SportsStryker,SportsSynthes,SportsZimmer,SportsLabRequests,SportsPathology,SportsLabRequestsOther,SportsPositioningDevices,Sportsarthrex_trimano_arm,Sportsarthrex_shoulder_traction_dev,Sportsamsco_arm_holder,Sportsbean_bag_half_or_full,Sportscaptains_chair,Sportsdyonics_shoulder_traction_dev,Sportsleg_holder_wcrossbar,Sportslateral_leg_holder,Sportspegboard,Sportssmith__nephew_hip_distractor,Sportsspider_arm_positioner,SportsPositioningDevicesOther,SportsLoaners,SportsLoanersVendor,SportsTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table sportsTraumaAndPodiatryLhh")
        mysql_connection.commit()

def updatesportsTraumaAndPodiatryLhh(mongo_id , serviceRequestId ,sportsTraumaAndPodiatryLhh):
        print(f"Inside updatesportsTraumaAndPodiatryLhh to update document in sportsTraumaAndPodiatryLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE sportsTraumaAndPodiatryLhh SET serviceRequestId = %s ,SportsBiologicsTissue = %s,SportsFreezeDried = %s,SportsFreezeDriedDetail = %s,SportsBiologicsTissueFrozen = %s,SportsBiologicsTissueFrozenDetail = %s,SportsBiologicsTissueOther = %s,SportsEquipment = %s,Sportsarthrex_pump = %s,SportsbeanEquip_bag_half_or_full = %s,Sportshand_table = %s,Sportshydraulic_lifter = %s,Sportshana_table = %s,Sportslateral_post = %s,Sportslinvatec_pump = %s,Sportsmidas_pedal = %s,SportsEquippegboard = %s,Sportssmith__nephew_pump = %s,SportsspiderEquip_arm_positioner = %s,SportsEquipmentOther = %s,SportsImagingSupportServices = %s,SportsXRay = %s,SportsImagingSupportServicesOther = %s,SportsImplants = %s,SportsImplantsVendorName = %s,SportsArthrex = %s,SportsDepuyMitek = %s,SportsHipscopeAnchors = %s,SportsMeniscalAnchors = %s,SportsImplantsOther = %s,SportsInstrumentation = %s,SportsInstrumentationVendor = %s,SportsDepuyBiomet = %s,SportsSN = %s,SportsStryker = %s,SportsSynthes = %s,SportsZimmer = %s,SportsLabRequests = %s,SportsPathology = %s,SportsLabRequestsOther = %s,SportsPositioningDevices = %s,Sportsarthrex_trimano_arm = %s,Sportsarthrex_shoulder_traction_dev = %s,Sportsamsco_arm_holder = %s,Sportsbean_bag_half_or_full = %s,Sportscaptains_chair = %s,Sportsdyonics_shoulder_traction_dev = %s,Sportsleg_holder_wcrossbar = %s,Sportslateral_leg_holder = %s,Sportspegboard = %s,Sportssmith__nephew_hip_distractor = %s,Sportsspider_arm_positioner = %s,SportsPositioningDevicesOther = %s,SportsLoaners = %s,SportsLoanersVendor = %s,SportsTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId,sportsTraumaAndPodiatryLhh['SportsBiologicsTissue'], sportsTraumaAndPodiatryLhh['SportsFreezeDried'], sportsTraumaAndPodiatryLhh['SportsFreezeDriedDetail'], sportsTraumaAndPodiatryLhh['SportsBiologicsTissueFrozen'], sportsTraumaAndPodiatryLhh['SportsBiologicsTissueFrozenDetail'], sportsTraumaAndPodiatryLhh['SportsBiologicsTissueOther'], sportsTraumaAndPodiatryLhh['SportsEquipment'], sportsTraumaAndPodiatryLhh['Sportsarthrex_pump'], sportsTraumaAndPodiatryLhh['SportsbeanEquip_bag_half_or_full'], sportsTraumaAndPodiatryLhh['Sportshand_table'], sportsTraumaAndPodiatryLhh['Sportshydraulic_lifter'], sportsTraumaAndPodiatryLhh['Sportshana_table'], sportsTraumaAndPodiatryLhh['Sportslateral_post'], sportsTraumaAndPodiatryLhh['Sportslinvatec_pump'], sportsTraumaAndPodiatryLhh['Sportsmidas_pedal'], sportsTraumaAndPodiatryLhh['SportsEquippegboard'], sportsTraumaAndPodiatryLhh['Sportssmith__nephew_pump'], sportsTraumaAndPodiatryLhh['SportsspiderEquip_arm_positioner'], sportsTraumaAndPodiatryLhh['SportsEquipmentOther'], sportsTraumaAndPodiatryLhh['SportsImagingSupportServices'], sportsTraumaAndPodiatryLhh['SportsXRay'], sportsTraumaAndPodiatryLhh['SportsImagingSupportServicesOther'], sportsTraumaAndPodiatryLhh['SportsImplants'], sportsTraumaAndPodiatryLhh['SportsImplantsVendorName'], sportsTraumaAndPodiatryLhh['SportsArthrex'], sportsTraumaAndPodiatryLhh['SportsDepuyMitek'], sportsTraumaAndPodiatryLhh['SportsHipscopeAnchors'], sportsTraumaAndPodiatryLhh['SportsMeniscalAnchors'], sportsTraumaAndPodiatryLhh['SportsImplantsOther'], sportsTraumaAndPodiatryLhh['SportsInstrumentation'], sportsTraumaAndPodiatryLhh['SportsInstrumentationVendor'], sportsTraumaAndPodiatryLhh['SportsDepuyBiomet'], sportsTraumaAndPodiatryLhh['SportsSN'], sportsTraumaAndPodiatryLhh['SportsStryker'], sportsTraumaAndPodiatryLhh['SportsSynthes'], sportsTraumaAndPodiatryLhh['SportsZimmer'], sportsTraumaAndPodiatryLhh['SportsLabRequests'], sportsTraumaAndPodiatryLhh['SportsPathology'], sportsTraumaAndPodiatryLhh['SportsLabRequestsOther'], sportsTraumaAndPodiatryLhh['SportsPositioningDevices'], sportsTraumaAndPodiatryLhh['Sportsarthrex_trimano_arm'], sportsTraumaAndPodiatryLhh['Sportsarthrex_shoulder_traction_dev'], sportsTraumaAndPodiatryLhh['Sportsamsco_arm_holder'], sportsTraumaAndPodiatryLhh['Sportsbean_bag_half_or_full'], sportsTraumaAndPodiatryLhh['Sportscaptains_chair'], sportsTraumaAndPodiatryLhh['Sportsdyonics_shoulder_traction_dev'], sportsTraumaAndPodiatryLhh['Sportsleg_holder_wcrossbar'], sportsTraumaAndPodiatryLhh['Sportslateral_leg_holder'], sportsTraumaAndPodiatryLhh['Sportspegboard'], sportsTraumaAndPodiatryLhh['Sportssmith__nephew_hip_distractor'], sportsTraumaAndPodiatryLhh['Sportsspider_arm_positioner'], sportsTraumaAndPodiatryLhh['SportsPositioningDevicesOther'], sportsTraumaAndPodiatryLhh['SportsLoaners'], sportsTraumaAndPodiatryLhh['SportsLoanersVendor'], sportsTraumaAndPodiatryLhh['SportsTrayRequested'],mongo_id))
        print(f"Updated document in sportsTraumaAndPodiatryLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()




def insertthoracicLhh(mongo_id , serviceRequestId ,thoracicLhh):
        print(f"Inside insertthoracicLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS thoracicLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,ThoracicBiologicTissue TEXT,ThoracicBiologicTissueOther TEXT,ThoracicEquipment TEXT,conmed_airseal TEXT,cryotherapy_truefreeze_machine_representative TEXT,dual_console TEXT,greenlight_laser TEXT,holmium_yag_laser TEXT,ligasure_machine TEXT,olympus_endoscopy_tower TEXT,stryker_tower TEXT,xi_robot_right_docking_left_docking TEXT,m_ranger_irrigation_fluid_warmer TEXT,ThoracicEquipmentOther TEXT,ThoracicImagingSupportService TEXT,ThoracicXRays TEXT,ThoracicImagingSupportServiceOther TEXT,ThoracicImplant TEXT,mesh TEXT,stent_bronchial TEXT,stent_esophageal TEXT,ThoracicImplantOther TEXT,ThoracicInstrumentation TEXT,ThoracicDaVinciXIBasicInstruments TEXT,ThoracicDaVinciXIScope TEXT,ThoracicDaVinciXIArmsSpecify TEXT,ThoracicInstrumentationOther TEXT,ThoracicLabRequest TEXT,ThoracicPathology TEXT,ThoracicThoracicLabRequestOther TEXT,ThoracicPositioningDevices TEXT,allen_stirrups_with_clamps TEXT,arm_positioner TEXT,axillary_roll TEXT,gel_rolls TEXT,pink_pad TEXT,regular_bed TEXT,robotic_bed TEXT,ThoracicPositioningDevicesOther TEXT,ThoracicSupplies TEXT,ThoracicCatheter TEXT,ThoracicStaples TEXT,ThoracicStaplesSize TEXT,ThoracicWires TEXT,ThoracicWiresOther TEXT,ThoracicSpecialTrocarSpecify TEXT,ThoracicHemostaticAgent TEXT,ThoracicHemostaticAgentOther TEXT,ThoracicBalloonDilator TEXT,ThoracicLASERFiberSpecify TEXT,ThoracicSuppliesOther TEXT,ThoracicSuture TEXT,ThoracicVLok TEXT,ThoracicVLokSize TEXT,ThoracicStratafix TEXT,ThoracicStratafixSize TEXT,ThoracicQuil TEXT,ThoracicQuilSize TEXT,ThoracicSutureOther TEXT,ThoracicMedication TEXT,exparel TEXT,ic_green TEXT,methylene_blue TEXT,omipaque TEXT,viscous_lidocaine TEXT,ThoracicMedicationOther TEXT,ThoracicLoaners TEXT,ThoracicLoanersVendor TEXT,ThoracicTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, thoracicLhh['ThoracicBiologicTissue'], thoracicLhh['ThoracicBiologicTissueOther'], thoracicLhh['ThoracicEquipment'], thoracicLhh['conmed_airseal'], thoracicLhh['cryotherapy_truefreeze_machine_representative'], thoracicLhh['dual_console'], thoracicLhh['greenlight_laser'], thoracicLhh['holmium_yag_laser'], thoracicLhh['ligasure_machine'], thoracicLhh['olympus_endoscopy_tower'], thoracicLhh['stryker_tower'], thoracicLhh['xi_robot_right_docking_left_docking'], thoracicLhh['m_ranger_irrigation_fluid_warmer'], thoracicLhh['ThoracicEquipmentOther'], thoracicLhh['ThoracicImagingSupportService'], thoracicLhh['ThoracicXRays'], thoracicLhh['ThoracicImagingSupportServiceOther'], thoracicLhh['ThoracicImplant'], thoracicLhh['mesh'], thoracicLhh['stent_bronchial'], thoracicLhh['stent_esophageal'], thoracicLhh['ThoracicImplantOther'], thoracicLhh['ThoracicInstrumentation'], thoracicLhh['ThoracicDaVinciXIBasicInstruments'], thoracicLhh['ThoracicDaVinciXIScope'], thoracicLhh['ThoracicDaVinciXIArmsSpecify'], thoracicLhh['ThoracicInstrumentationOther'], thoracicLhh['ThoracicLabRequest'], thoracicLhh['ThoracicPathology'], thoracicLhh['ThoracicThoracicLabRequestOther'], thoracicLhh['ThoracicPositioningDevices'], thoracicLhh['allen_stirrups_with_clamps'], thoracicLhh['arm_positioner'], thoracicLhh['axillary_roll'], thoracicLhh['gel_rolls'], thoracicLhh['pink_pad'], thoracicLhh['regular_bed'], thoracicLhh['robotic_bed'], thoracicLhh['ThoracicPositioningDevicesOther'], thoracicLhh['ThoracicSupplies'], thoracicLhh['ThoracicCatheter'], thoracicLhh['ThoracicStaples'], thoracicLhh['ThoracicStaplesSize'], thoracicLhh['ThoracicWires'], thoracicLhh['ThoracicWiresOther'], thoracicLhh['ThoracicSpecialTrocarSpecify'],thoracicLhh['ThoracicHemostaticAgent'], thoracicLhh['ThoracicHemostaticAgentOther'],thoracicLhh['ThoracicBalloonDilator'], thoracicLhh['ThoracicLASERFiberSpecify'],  thoracicLhh['ThoracicSuppliesOther'], thoracicLhh['ThoracicSuture'], thoracicLhh['ThoracicVLok'], thoracicLhh['ThoracicVLokSize'], thoracicLhh['ThoracicStratafix'], thoracicLhh['ThoracicStratafixSize'], thoracicLhh['ThoracicQuil'], thoracicLhh['ThoracicQuilSize'], thoracicLhh['ThoracicSutureOther'], thoracicLhh['ThoracicMedication'], thoracicLhh['exparel'], thoracicLhh['ic_green'], thoracicLhh['methylene_blue'], thoracicLhh['omipaque'], thoracicLhh['viscous_lidocaine'], thoracicLhh['ThoracicMedicationOther'], thoracicLhh['ThoracicLoaners'], thoracicLhh['ThoracicLoanersVendor'], thoracicLhh['ThoracicTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO thoracicLhh (serviceRequest_mongo_id, serviceRequestId,ThoracicBiologicTissue,ThoracicBiologicTissueOther,ThoracicEquipment,conmed_airseal,cryotherapy_truefreeze_machine_representative,dual_console,greenlight_laser,holmium_yag_laser,ligasure_machine,olympus_endoscopy_tower,stryker_tower,xi_robot_right_docking_left_docking,m_ranger_irrigation_fluid_warmer,ThoracicEquipmentOther,ThoracicImagingSupportService,ThoracicXRays,ThoracicImagingSupportServiceOther,ThoracicImplant,mesh,stent_bronchial,stent_esophageal,ThoracicImplantOther,ThoracicInstrumentation,ThoracicDaVinciXIBasicInstruments,ThoracicDaVinciXIScope,ThoracicDaVinciXIArmsSpecify,ThoracicInstrumentationOther,ThoracicLabRequest,ThoracicPathology,ThoracicThoracicLabRequestOther,ThoracicPositioningDevices,allen_stirrups_with_clamps,arm_positioner,axillary_roll,gel_rolls,pink_pad,regular_bed,robotic_bed,ThoracicPositioningDevicesOther,ThoracicSupplies,ThoracicCatheter,ThoracicStaples,ThoracicStaplesSize,ThoracicWires,ThoracicWiresOther,ThoracicSpecialTrocarSpecify,ThoracicHemostaticAgent,ThoracicHemostaticAgentOther,ThoracicBalloonDilator,ThoracicLASERFiberSpecify,ThoracicSuppliesOther,ThoracicSuture,ThoracicVLok,ThoracicVLokSize,ThoracicStratafix,ThoracicStratafixSize,ThoracicQuil,ThoracicQuilSize,ThoracicSutureOther,ThoracicMedication,exparel,ic_green,methylene_blue,omipaque,viscous_lidocaine,ThoracicMedicationOther,ThoracicLoaners,ThoracicLoanersVendor,ThoracicTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table thoracicLhh")
        mysql_connection.commit()

def updatethoracicLhh(mongo_id , serviceRequestId ,thoracicLhh):
        print(f"Inside updatethoracicLhh to update document in thoracicLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE thoracicLhh SET serviceRequestId = %s ,ThoracicBiologicTissue = %s,ThoracicBiologicTissueOther = %s,ThoracicEquipment = %s,conmed_airseal = %s,cryotherapy_truefreeze_machine_representative = %s,dual_console = %s,greenlight_laser = %s,holmium_yag_laser = %s,ligasure_machine = %s,olympus_endoscopy_tower = %s,stryker_tower = %s,xi_robot_right_docking_left_docking = %s,m_ranger_irrigation_fluid_warmer = %s,ThoracicEquipmentOther = %s,ThoracicImagingSupportService = %s,ThoracicXRays = %s,ThoracicImagingSupportServiceOther = %s,ThoracicImplant = %s,mesh = %s,stent_bronchial = %s,stent_esophageal = %s,ThoracicImplantOther = %s,ThoracicInstrumentation = %s,ThoracicDaVinciXIBasicInstruments = %s,ThoracicDaVinciXIScope = %s,ThoracicDaVinciXIArmsSpecify = %s,ThoracicInstrumentationOther = %s,ThoracicLabRequest = %s,ThoracicPathology = %s,ThoracicThoracicLabRequestOther = %s,ThoracicPositioningDevices = %s,allen_stirrups_with_clamps = %s,arm_positioner = %s,axillary_roll = %s,gel_rolls = %s,pink_pad = %s,regular_bed = %s,robotic_bed = %s,ThoracicPositioningDevicesOther = %s,ThoracicSupplies = %s,ThoracicCatheter = %s,ThoracicStaples = %s,ThoracicStaplesSize = %s,ThoracicWires = %s,ThoracicWiresOther = %s,ThoracicSpecialTrocarSpecify = %s,ThoracicHemostaticAgent = %s,ThoracicHemostaticAgentOther = %s,ThoracicBalloonDilator = %s,ThoracicLASERFiberSpecify = %s,ThoracicSuppliesOther = %s,ThoracicSuture = %s,ThoracicVLok = %s,ThoracicVLokSize = %s,ThoracicStratafix = %s,ThoracicStratafixSize = %s,ThoracicQuil = %s,ThoracicQuilSize = %s,ThoracicSutureOther = %s,ThoracicMedication = %s,exparel = %s,ic_green = %s,methylene_blue = %s,omipaque = %s,viscous_lidocaine = %s,ThoracicMedicationOther = %s,ThoracicLoaners = %s,ThoracicLoanersVendor = %s,ThoracicTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId,thoracicLhh['ThoracicBiologicTissue'], thoracicLhh['ThoracicBiologicTissueOther'], thoracicLhh['ThoracicEquipment'], thoracicLhh['conmed_airseal'], thoracicLhh['cryotherapy_truefreeze_machine_representative'], thoracicLhh['dual_console'], thoracicLhh['greenlight_laser'], thoracicLhh['holmium_yag_laser'], thoracicLhh['ligasure_machine'], thoracicLhh['olympus_endoscopy_tower'], thoracicLhh['stryker_tower'], thoracicLhh['xi_robot_right_docking_left_docking'], thoracicLhh['m_ranger_irrigation_fluid_warmer'], thoracicLhh['ThoracicEquipmentOther'], thoracicLhh['ThoracicImagingSupportService'], thoracicLhh['ThoracicXRays'], thoracicLhh['ThoracicImagingSupportServiceOther'], thoracicLhh['ThoracicImplant'], thoracicLhh['mesh'], thoracicLhh['stent_bronchial'], thoracicLhh['stent_esophageal'], thoracicLhh['ThoracicImplantOther'], thoracicLhh['ThoracicInstrumentation'], thoracicLhh['ThoracicDaVinciXIBasicInstruments'], thoracicLhh['ThoracicDaVinciXIScope'], thoracicLhh['ThoracicDaVinciXIArmsSpecify'], thoracicLhh['ThoracicInstrumentationOther'], thoracicLhh['ThoracicLabRequest'], thoracicLhh['ThoracicPathology'], thoracicLhh['ThoracicThoracicLabRequestOther'], thoracicLhh['ThoracicPositioningDevices'], thoracicLhh['allen_stirrups_with_clamps'], thoracicLhh['arm_positioner'], thoracicLhh['axillary_roll'], thoracicLhh['gel_rolls'], thoracicLhh['pink_pad'], thoracicLhh['regular_bed'], thoracicLhh['robotic_bed'], thoracicLhh['ThoracicPositioningDevicesOther'], thoracicLhh['ThoracicSupplies'], thoracicLhh['ThoracicCatheter'], thoracicLhh['ThoracicStaples'], thoracicLhh['ThoracicStaplesSize'], thoracicLhh['ThoracicWires'], thoracicLhh['ThoracicWiresOther'], thoracicLhh['ThoracicSpecialTrocarSpecify'],thoracicLhh['ThoracicHemostaticAgent'],thoracicLhh['ThoracicHemostaticAgentOther'], thoracicLhh['ThoracicBalloonDilator'], thoracicLhh['ThoracicLASERFiberSpecify'],  thoracicLhh['ThoracicSuppliesOther'], thoracicLhh['ThoracicSuture'], thoracicLhh['ThoracicVLok'], thoracicLhh['ThoracicVLokSize'], thoracicLhh['ThoracicStratafix'], thoracicLhh['ThoracicStratafixSize'], thoracicLhh['ThoracicQuil'], thoracicLhh['ThoracicQuilSize'], thoracicLhh['ThoracicSutureOther'], thoracicLhh['ThoracicMedication'], thoracicLhh['exparel'], thoracicLhh['ic_green'], thoracicLhh['methylene_blue'], thoracicLhh['omipaque'], thoracicLhh['viscous_lidocaine'], thoracicLhh['ThoracicMedicationOther'], thoracicLhh['ThoracicLoaners'], thoracicLhh['ThoracicLoanersVendor'], thoracicLhh['ThoracicTrayRequested'],mongo_id))
        print(f"Updated document in thoracicLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()






def inserttotalJointsLhh(mongo_id , serviceRequestId ,totalJointsLhh):
        print(f"Inside inserttotalJointsLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS totalJointsLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,TotalBiologicsTissue TEXT, frozen_bone_femoral_head TEXT, frozen_bone_femoral_shaft TEXT, frozen_bone_femoral_strut TEXT, freeze_dried_crush_canc TEXT, grafton_putty TEXT, TotalBiologicsTissueOther TEXT, TotalEquipment TEXT, aquamantys TEXT, arthrex_shoulder TEXT, evicel_pump TEXT, mako_robot TEXT, midas TEXT, traction_device TEXT, TotalUltradrive TEXT, TotalEquipmentOther TEXT, TotalImagingSupportServices TEXT, TotalXRays TEXT, TotalImagingSupportServicesOther TEXT, TotalInstrumentation TEXT, arthrex TEXT, biomet TEXT, depuy TEXT, donjoy TEXT, exactech TEXT, link TEXT, mako TEXT, smith_nephew TEXT, stryker TEXT, synthes TEXT, wright_medical TEXT, zimmer TEXT, TotalInstrumentationOther TEXT, TotalLabRequest TEXT, TotalPathology TEXT, TotalLabRequestOther TEXT, TotalPositioningDevices TEXT, allen_medical_arm_positioner TEXT, bean_bag TEXT, captains_chair TEXT, de_mayo_leg_positioner TEXT, dyonics_shoulder_positioner TEXT, hand_table TEXT, hip_table TEXT, innomed_hip_positioner TEXT, leg_holder_arthroscopy TEXT, mayfield_head_rest TEXT, montreal_device TEXT, peg_board TEXT, TotalPositioningDevicesOther TEXT, TotalLoaners TEXT, TotalLoanersVendor TEXT, TotalTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, totalJointsLhh['TotalBiologicsTissue'], totalJointsLhh['frozen_bone_femoral_head'], totalJointsLhh['frozen_bone_femoral_shaft'], totalJointsLhh['frozen_bone_femoral_strut'], totalJointsLhh['freeze_dried_crush_canc'], totalJointsLhh['grafton_putty'], totalJointsLhh['TotalBiologicsTissueOther'], totalJointsLhh['TotalEquipment'], totalJointsLhh['aquamantys'], totalJointsLhh['arthrex_shoulder'], totalJointsLhh['evicel_pump'], totalJointsLhh['mako_robot'], totalJointsLhh['midas'], totalJointsLhh['traction_device'], totalJointsLhh['TotalUltradrive'], totalJointsLhh['TotalEquipmentOther'], totalJointsLhh['TotalImagingSupportServices'], totalJointsLhh['TotalXRays'], totalJointsLhh['TotalImagingSupportServicesOther'], totalJointsLhh['TotalInstrumentation'], totalJointsLhh['arthrex'], totalJointsLhh['biomet'], totalJointsLhh['depuy'], totalJointsLhh['donjoy'], totalJointsLhh['exactech'], totalJointsLhh['link'], totalJointsLhh['mako'], totalJointsLhh['smith_nephew'], totalJointsLhh['stryker'], totalJointsLhh['synthes'], totalJointsLhh['wright_medical'], totalJointsLhh['zimmer'], totalJointsLhh['TotalInstrumentationOther'], totalJointsLhh['TotalLabRequest'], totalJointsLhh['TotalPathology'], totalJointsLhh['TotalLabRequestOther'], totalJointsLhh['TotalPositioningDevices'], totalJointsLhh['allen_medical_arm_positioner'], totalJointsLhh['bean_bag'], totalJointsLhh['captains_chair'], totalJointsLhh['de_mayo_leg_positioner'], totalJointsLhh['dyonics_shoulder_positioner'], totalJointsLhh['hand_table'], totalJointsLhh['hip_table'], totalJointsLhh['innomed_hip_positioner'], totalJointsLhh['leg_holder_arthroscopy'], totalJointsLhh['mayfield_head_rest'], totalJointsLhh['montreal_device'], totalJointsLhh['peg_board'], totalJointsLhh['TotalPositioningDevicesOther'], totalJointsLhh['TotalLoaners'], totalJointsLhh['TotalLoanersVendor'], totalJointsLhh['TotalTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO totalJointsLhh (serviceRequest_mongo_id, serviceRequestId,TotalBiologicsTissue, frozen_bone_femoral_head, frozen_bone_femoral_shaft, frozen_bone_femoral_strut, freeze_dried_crush_canc, grafton_putty, TotalBiologicsTissueOther, TotalEquipment, aquamantys, arthrex_shoulder, evicel_pump, mako_robot, midas, traction_device, TotalUltradrive, TotalEquipmentOther, TotalImagingSupportServices, TotalXRays, TotalImagingSupportServicesOther, TotalInstrumentation, arthrex, biomet, depuy, donjoy, exactech, link, mako, smith_nephew, stryker, synthes, wright_medical, zimmer, TotalInstrumentationOther, TotalLabRequest, TotalPathology, TotalLabRequestOther, TotalPositioningDevices, allen_medical_arm_positioner, bean_bag, captains_chair, de_mayo_leg_positioner, dyonics_shoulder_positioner, hand_table, hip_table, innomed_hip_positioner, leg_holder_arthroscopy, mayfield_head_rest, montreal_device, peg_board, TotalPositioningDevicesOther, TotalLoaners, TotalLoanersVendor, TotalTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table totalJointsLhh")
        mysql_connection.commit()

def updatetotalJointsLhh(mongo_id , serviceRequestId ,totalJointsLhh):
        print(f"Inside updatetotalJointsLhh to update document in totalJointsLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE totalJointsLhh SET serviceRequestId = %s ,TotalBiologicsTissue = %s, frozen_bone_femoral_head = %s, frozen_bone_femoral_shaft = %s, frozen_bone_femoral_strut = %s, freeze_dried_crush_canc = %s, grafton_putty = %s, TotalBiologicsTissueOther = %s, TotalEquipment = %s, aquamantys = %s, arthrex_shoulder = %s, evicel_pump = %s, mako_robot = %s, midas = %s, traction_device = %s, TotalUltradrive = %s, TotalEquipmentOther = %s, TotalImagingSupportServices = %s, TotalXRays = %s, TotalImagingSupportServicesOther = %s, TotalInstrumentation = %s, arthrex = %s, biomet = %s, depuy = %s, donjoy = %s, exactech = %s, link = %s, mako = %s, smith_nephew = %s, stryker = %s, synthes = %s, wright_medical = %s, zimmer = %s, TotalInstrumentationOther = %s, TotalLabRequest = %s, TotalPathology = %s, TotalLabRequestOther = %s, TotalPositioningDevices = %s, allen_medical_arm_positioner = %s, bean_bag = %s, captains_chair = %s, de_mayo_leg_positioner = %s, dyonics_shoulder_positioner = %s, hand_table = %s, hip_table = %s, innomed_hip_positioner = %s, leg_holder_arthroscopy = %s, mayfield_head_rest = %s, montreal_device = %s, peg_board = %s, TotalPositioningDevicesOther = %s, TotalLoaners = %s, TotalLoanersVendor = %s, TotalTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId,totalJointsLhh['TotalBiologicsTissue'], totalJointsLhh['frozen_bone_femoral_head'], totalJointsLhh['frozen_bone_femoral_shaft'], totalJointsLhh['frozen_bone_femoral_strut'], totalJointsLhh['freeze_dried_crush_canc'], totalJointsLhh['grafton_putty'], totalJointsLhh['TotalBiologicsTissueOther'], totalJointsLhh['TotalEquipment'], totalJointsLhh['aquamantys'], totalJointsLhh['arthrex_shoulder'], totalJointsLhh['evicel_pump'], totalJointsLhh['mako_robot'], totalJointsLhh['midas'], totalJointsLhh['traction_device'], totalJointsLhh['TotalUltradrive'], totalJointsLhh['TotalEquipmentOther'], totalJointsLhh['TotalImagingSupportServices'], totalJointsLhh['TotalXRays'], totalJointsLhh['TotalImagingSupportServicesOther'], totalJointsLhh['TotalInstrumentation'], totalJointsLhh['arthrex'], totalJointsLhh['biomet'], totalJointsLhh['depuy'], totalJointsLhh['donjoy'], totalJointsLhh['exactech'], totalJointsLhh['link'], totalJointsLhh['mako'], totalJointsLhh['smith_nephew'], totalJointsLhh['stryker'], totalJointsLhh['synthes'], totalJointsLhh['wright_medical'], totalJointsLhh['zimmer'], totalJointsLhh['TotalInstrumentationOther'], totalJointsLhh['TotalLabRequest'], totalJointsLhh['TotalPathology'], totalJointsLhh['TotalLabRequestOther'], totalJointsLhh['TotalPositioningDevices'], totalJointsLhh['allen_medical_arm_positioner'], totalJointsLhh['bean_bag'], totalJointsLhh['captains_chair'], totalJointsLhh['de_mayo_leg_positioner'], totalJointsLhh['dyonics_shoulder_positioner'], totalJointsLhh['hand_table'], totalJointsLhh['hip_table'], totalJointsLhh['innomed_hip_positioner'], totalJointsLhh['leg_holder_arthroscopy'], totalJointsLhh['mayfield_head_rest'], totalJointsLhh['montreal_device'], totalJointsLhh['peg_board'], totalJointsLhh['TotalPositioningDevicesOther'], totalJointsLhh['TotalLoaners'], totalJointsLhh['TotalLoanersVendor'], totalJointsLhh['TotalTrayRequested'],mongo_id))
        print(f"Updated document in totalJointsLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()



def insertvascularSurgeryLhh(mongo_id , serviceRequestId ,vascularSurgeryLhh):
        print(f"Inside insertvascularSurgeryLhh ")
        mysql_cursor.execute("CREATE TABLE IF NOT EXISTS vascularSurgeryLhh (id INT AUTO_INCREMENT PRIMARY KEY, serviceRequest_mongo_id TEXT, serviceRequestId TEXT,VascularEquipment TEXT, hand_table_nonfluoro TEXT, headlight TEXT, ligasure_machine TEXT, power_injector_machine TEXT, sorin_cell_saver TEXT, sitting_stools_chairs TEXT, stryker_chair TEXT, vascular_doppler_80_mhz TEXT, VascularFluoroscopyArmBoard TEXT, VascularEquipmentOther TEXT, VascularImplants TEXT, VascularStents TEXT, VascularStentsType TEXT, VascularStentsSize TEXT, VascularWiresSpecify TEXT, VascularSheathsSpecify TEXT, VascularImplantsOther TEXT, VascularInstrumentation TEXT, av_tunneler TEXT, deep_weitlanders TEXT, femoral_tunneler TEXT, henly_popliteal_retractors TEXT, martin_arm_ TEXT, omni_retractor TEXT, VascularInstrumentationOther TEXT, VascularLabRequests TEXT, VascularPathology TEXT, VascularMicrobiology TEXT, VascularLabRequestsOther TEXT, VascularPositioningDevices TEXT, base_of_table_at_foot_of_bed TEXT, base_of_table_at_head_of_bead TEXT, VascularPositioningDevicesOther TEXT, VascularSupplies TEXT, vcare TEXT, VascularVCareSize TEXT, VascularLigasure TEXT, VascularLigasureType TEXT, VascularLigasureSize TEXT, VascularHemostaticAgent TEXT, VascularSuppliesOther TEXT, VascularSuppliesSpecifyOther TEXT, VascularSuture TEXT, gor_tex TEXT, nylon TEXT, VascularSutureOther TEXT, VascularMedication TEXT, bacitracin_ointment TEXT, hydrogen_peroxide TEXT, joint_solution TEXT, lidocaine_1 TEXT, protamine TEXT, heparinized_saline TEXT, VascularHeparinizedSalineStrength TEXT, VascularMarcaine TEXT, VascularMarcaineStrength TEXT, VascularMedicationOther TEXT, VascularVendorPresence TEXT, abott TEXT, boston_scientific TEXT, gore TEXT, inari TEXT, medtronic TEXT, terumo TEXT, VascularVendorPresenceOther TEXT, VascularLoaners TEXT, VascularLoanersVendor TEXT, VascularTrayRequested TEXT,created_datetime DATETIME DEFAULT CURRENT_TIMESTAMP, updated_datetime DATETIME ON UPDATE CURRENT_TIMESTAMP)")
        mysql_values = (
                         mongo_id, serviceRequestId, vascularSurgeryLhh['VascularEquipment'],vascularSurgeryLhh['hand_table_nonfluoro'],vascularSurgeryLhh['headlight'],vascularSurgeryLhh['ligasure_machine'],vascularSurgeryLhh['power_injector_machine'],vascularSurgeryLhh['sorin_cell_saver'],vascularSurgeryLhh['sitting_stools_chairs'],vascularSurgeryLhh['stryker_chair'],vascularSurgeryLhh['vascular_doppler_80_mhz'],vascularSurgeryLhh['VascularFluoroscopyArmBoard'],vascularSurgeryLhh['VascularEquipmentOther'],vascularSurgeryLhh['VascularImplants'],vascularSurgeryLhh['VascularStents'],vascularSurgeryLhh['VascularStentsType'],vascularSurgeryLhh['VascularStentsSize'],vascularSurgeryLhh['VascularWiresSpecify'],vascularSurgeryLhh['VascularSheathsSpecify'],vascularSurgeryLhh['VascularImplantsOther'],vascularSurgeryLhh['VascularInstrumentation'],vascularSurgeryLhh['av_tunneler'],vascularSurgeryLhh['deep_weitlanders'],vascularSurgeryLhh['femoral_tunneler'],vascularSurgeryLhh['henly_popliteal_retractors'],vascularSurgeryLhh['martin_arm_'],vascularSurgeryLhh['omni_retractor'],vascularSurgeryLhh['VascularInstrumentationOther'],vascularSurgeryLhh['VascularLabRequests'],vascularSurgeryLhh['VascularPathology'],vascularSurgeryLhh['VascularMicrobiology'],vascularSurgeryLhh['VascularLabRequestsOther'],vascularSurgeryLhh['VascularPositioningDevices'],vascularSurgeryLhh['base_of_table_at_foot_of_bed'],vascularSurgeryLhh['base_of_table_at_head_of_bead'],vascularSurgeryLhh['VascularPositioningDevicesOther'],vascularSurgeryLhh['VascularSupplies'],vascularSurgeryLhh['vcare'],vascularSurgeryLhh['VascularVCareSize'],vascularSurgeryLhh['VascularLigasure'],vascularSurgeryLhh['VascularLigasureType'],vascularSurgeryLhh['VascularLigasureSize'],vascularSurgeryLhh['VascularHemostaticAgent'],vascularSurgeryLhh['VascularSuppliesOther'],vascularSurgeryLhh['VascularSuppliesSpecifyOther'],vascularSurgeryLhh['VascularSuture'],vascularSurgeryLhh['gor_tex'],vascularSurgeryLhh['nylon'],vascularSurgeryLhh['VascularSutureOther'],vascularSurgeryLhh['VascularMedication'],vascularSurgeryLhh['bacitracin_ointment'],vascularSurgeryLhh['hydrogen_peroxide'],vascularSurgeryLhh['joint_solution'],vascularSurgeryLhh['lidocaine_1'],vascularSurgeryLhh['protamine'],vascularSurgeryLhh['heparinized_saline'],vascularSurgeryLhh['VascularHeparinizedSalineStrength'],vascularSurgeryLhh['VascularMarcaine'],vascularSurgeryLhh['VascularMarcaineStrength'],vascularSurgeryLhh['VascularMedicationOther'],vascularSurgeryLhh['VascularVendorPresence'],vascularSurgeryLhh['abott'],vascularSurgeryLhh['boston_scientific'],vascularSurgeryLhh['gore'],vascularSurgeryLhh['inari'],vascularSurgeryLhh['medtronic'],vascularSurgeryLhh['terumo'],vascularSurgeryLhh['VascularVendorPresenceOther'],vascularSurgeryLhh['VascularLoaners'],vascularSurgeryLhh['VascularLoanersVendor'],vascularSurgeryLhh['VascularTrayRequested']

                      )
        mysql_cursor.execute(
                                "INSERT INTO vascularSurgeryLhh (serviceRequest_mongo_id, serviceRequestId,VascularEquipment,hand_table_nonfluoro,headlight,ligasure_machine,power_injector_machine,sorin_cell_saver,sitting_stools_chairs,stryker_chair,vascular_doppler_80_mhz,VascularFluoroscopyArmBoard,VascularEquipmentOther,VascularImplants,VascularStents,VascularStentsType,VascularStentsSize,VascularWiresSpecify,VascularSheathsSpecify,VascularImplantsOther,VascularInstrumentation,av_tunneler,deep_weitlanders,femoral_tunneler,henly_popliteal_retractors,martin_arm_,omni_retractor,VascularInstrumentationOther,VascularLabRequests,VascularPathology,VascularMicrobiology,VascularLabRequestsOther,VascularPositioningDevices,base_of_table_at_foot_of_bed,base_of_table_at_head_of_bead,VascularPositioningDevicesOther,VascularSupplies,vcare,VascularVCareSize,VascularLigasure,VascularLigasureType,VascularLigasureSize,VascularHemostaticAgent,VascularSuppliesOther,VascularSuppliesSpecifyOther,VascularSuture,gor_tex,nylon,VascularSutureOther,VascularMedication,bacitracin_ointment,hydrogen_peroxide,joint_solution,lidocaine_1,protamine,heparinized_saline,VascularHeparinizedSalineStrength,VascularMarcaine,VascularMarcaineStrength,VascularMedicationOther,VascularVendorPresence,abott,boston_scientific,gore,inari,medtronic,terumo,VascularVendorPresenceOther,VascularLoaners,VascularLoanersVendor,VascularTrayRequested) VALUES (%s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s,%s)",
                                mysql_values
                            )
        print(f"Row inserted with mongo_id  - {mongo_id} in table vascularSurgeryLhh")
        mysql_connection.commit()

def updatevascularSurgeryLhh(mongo_id , serviceRequestId ,vascularSurgeryLhh):
        print(f"Inside updatevascularSurgeryLhh to update document in vascularSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_cursor.execute("UPDATE vascularSurgeryLhh SET serviceRequestId = %s ,VascularEquipment = %s,hand_table_nonfluoro = %s,headlight = %s,ligasure_machine = %s,power_injector_machine = %s,sorin_cell_saver = %s,sitting_stools_chairs = %s,stryker_chair = %s,vascular_doppler_80_mhz = %s,VascularFluoroscopyArmBoard = %s,VascularEquipmentOther = %s,VascularImplants = %s,VascularStents = %s,VascularStentsType = %s,VascularStentsSize = %s,VascularWiresSpecify = %s,VascularSheathsSpecify = %s,VascularImplantsOther = %s,VascularInstrumentation = %s,av_tunneler = %s,deep_weitlanders = %s,femoral_tunneler = %s,henly_popliteal_retractors = %s,martin_arm_ = %s,omni_retractor = %s,VascularInstrumentationOther = %s,VascularLabRequests = %s,VascularPathology = %s,VascularMicrobiology = %s,VascularLabRequestsOther = %s,VascularPositioningDevices = %s,base_of_table_at_foot_of_bed = %s,base_of_table_at_head_of_bead = %s,VascularPositioningDevicesOther = %s,VascularSupplies = %s,vcare = %s,VascularVCareSize = %s,VascularLigasure = %s,VascularLigasureType = %s,VascularLigasureSize = %s,VascularHemostaticAgent = %s,VascularSuppliesOther = %s,VascularSuppliesSpecifyOther = %s,VascularSuture = %s,gor_tex = %s,nylon = %s,VascularSutureOther = %s,VascularMedication = %s,bacitracin_ointment = %s,hydrogen_peroxide = %s,joint_solution = %s,lidocaine_1 = %s,protamine = %s,heparinized_saline = %s,VascularHeparinizedSalineStrength = %s,VascularMarcaine = %s,VascularMarcaineStrength = %s,VascularMedicationOther = %s,VascularVendorPresence = %s,abott = %s,boston_scientific = %s,gore = %s,inari = %s,medtronic = %s,terumo = %s,VascularVendorPresenceOther = %s,VascularLoaners = %s,VascularLoanersVendor = %s,VascularTrayRequested = %s WHERE serviceRequest_mongo_id = %s ",( serviceRequestId,vascularSurgeryLhh['VascularEquipment'],vascularSurgeryLhh['hand_table_nonfluoro'],vascularSurgeryLhh['headlight'],vascularSurgeryLhh['ligasure_machine'],vascularSurgeryLhh['power_injector_machine'],vascularSurgeryLhh['sorin_cell_saver'],vascularSurgeryLhh['sitting_stools_chairs'],vascularSurgeryLhh['stryker_chair'],vascularSurgeryLhh['vascular_doppler_80_mhz'],vascularSurgeryLhh['VascularFluoroscopyArmBoard'],vascularSurgeryLhh['VascularEquipmentOther'],vascularSurgeryLhh['VascularImplants'],vascularSurgeryLhh['VascularStents'],vascularSurgeryLhh['VascularStentsType'],vascularSurgeryLhh['VascularStentsSize'],vascularSurgeryLhh['VascularWiresSpecify'],vascularSurgeryLhh['VascularSheathsSpecify'],vascularSurgeryLhh['VascularImplantsOther'],vascularSurgeryLhh['VascularInstrumentation'],vascularSurgeryLhh['av_tunneler'],vascularSurgeryLhh['deep_weitlanders'],vascularSurgeryLhh['femoral_tunneler'],vascularSurgeryLhh['henly_popliteal_retractors'],vascularSurgeryLhh['martin_arm_'],vascularSurgeryLhh['omni_retractor'],vascularSurgeryLhh['VascularInstrumentationOther'],vascularSurgeryLhh['VascularLabRequests'],vascularSurgeryLhh['VascularPathology'],vascularSurgeryLhh['VascularMicrobiology'],vascularSurgeryLhh['VascularLabRequestsOther'],vascularSurgeryLhh['VascularPositioningDevices'],vascularSurgeryLhh['base_of_table_at_foot_of_bed'],vascularSurgeryLhh['base_of_table_at_head_of_bead'],vascularSurgeryLhh['VascularPositioningDevicesOther'],vascularSurgeryLhh['VascularSupplies'],vascularSurgeryLhh['vcare'],vascularSurgeryLhh['VascularVCareSize'],vascularSurgeryLhh['VascularLigasure'],vascularSurgeryLhh['VascularLigasureType'],vascularSurgeryLhh['VascularLigasureSize'],vascularSurgeryLhh['VascularHemostaticAgent'],vascularSurgeryLhh['VascularSuppliesOther'],vascularSurgeryLhh['VascularSuppliesSpecifyOther'],vascularSurgeryLhh['VascularSuture'],vascularSurgeryLhh['gor_tex'],vascularSurgeryLhh['nylon'],vascularSurgeryLhh['VascularSutureOther'],vascularSurgeryLhh['VascularMedication'],vascularSurgeryLhh['bacitracin_ointment'],vascularSurgeryLhh['hydrogen_peroxide'],vascularSurgeryLhh['joint_solution'],vascularSurgeryLhh['lidocaine_1'],vascularSurgeryLhh['protamine'],vascularSurgeryLhh['heparinized_saline'],vascularSurgeryLhh['VascularHeparinizedSalineStrength'],vascularSurgeryLhh['VascularMarcaine'],vascularSurgeryLhh['VascularMarcaineStrength'],vascularSurgeryLhh['VascularMedicationOther'],vascularSurgeryLhh['VascularVendorPresence'],vascularSurgeryLhh['abott'],vascularSurgeryLhh['boston_scientific'],vascularSurgeryLhh['gore'],vascularSurgeryLhh['inari'],vascularSurgeryLhh['medtronic'],vascularSurgeryLhh['terumo'],vascularSurgeryLhh['VascularVendorPresenceOther'],vascularSurgeryLhh['VascularLoaners'],vascularSurgeryLhh['VascularLoanersVendor'],vascularSurgeryLhh['VascularTrayRequested'],mongo_id))
        print(f"Updated document in vascularSurgeryLhh table with mongo_id - {mongo_id}")
        mysql_connection.commit()


def get_text_pipe_separated(icd_codes):
    if not icd_codes:
        return ""

    output_list = []
    for item in icd_codes:
        icd_code_item = item.get("ICDCodeDropDown", {})
        text = icd_code_item.get("text", "") or ""
        output_list.append(text)

    result = "|".join(output_list)
    return result


def array_to_pipe_separated(arr):
    if not arr:
        return ""  # Return an empty string if the array is empty

    # Join elements of the array using '|', replacing None with an empty string
    return '|'.join(str(item) if item is not None else '' for item in arr)



def get_values_pipe_separated(input_array):
    values = []  # Initialize an empty list to store the values

    # Iterate through the array elements
    for item in input_array:
        if "ENTAllodermThickness" in item:
            # Append the "value" of "ENTAllodermThickness" to the list
            values.append(item["ENTAllodermThickness"]["value"])

    # Join the values using '|'
    return '|'.join(values)


def ImplantsSize(input_array):
    formatted_string = []  # Initialize an empty list to store the formatted strings

    # Iterate through the array elements
    for item in input_array:
        if "GeneralImplantsQuality" in item and "GeneralImplantsSize" in item:
            # Create a formatted string for each element
            formatted_item = f"{item['GeneralImplantsQuality']}|{item['GeneralImplantsSize']}"
            formatted_string.append(formatted_item)

    # Join the formatted strings using '||'
    return '||'.join(formatted_string)


def ImplantsVendor(input_array):
    formatted_string = []  # Initialize an empty list to store the formatted strings

    # Iterate through the array elements
    for item in input_array:
        if "GeneralImplantsPartNo" in item and "GeneralImplantsVendor" in item:
            # Create a formatted string for each element
            formatted_item = f"{item['GeneralImplantsPartNo']}|{item['GeneralImplantsVendor']}"
            formatted_string.append(formatted_item)

    # Join the formatted strings using '||'
    return '||'.join(formatted_string)


def format_genitourinary_alloderm(input_array):
    formatted_string = []  # Initialize an empty list to store the formatted strings

    # Iterate through the array elements
    for item in input_array:
        if "GenitourinaryAllodermSize" in item and "GenitourinaryAllodermThickness" in item:
            # Create a formatted string for each element
            formatted_item = f"{item['GenitourinaryAllodermSize']}|{item['GenitourinaryAllodermThickness']['value']}"
            formatted_string.append(formatted_item)

    # Join the formatted strings using '||'
    return '||'.join(formatted_string)


def value_pipe(input_list):
    print("inside value_pipe")
    print(f"input_list-{input_list}")

    if not input_list:
        return ""

    values = [item.get("value", "") or "" for item in input_list]
    return str("|".join(values))



def GynecologyLigasureTypeSize(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        ligasure_value = item.get("GynecologyLigasure", {}).get("value", "") or ""
        size_value = item.get("GynecologyLigasureSize", {}).get("value", "") or ""
        type_value = item.get("GynecologyLigasureType", {}).get("value", "") or ""

        output_list.extend([ligasure_value, size_value, type_value])
        output_list.append("")  # Append an empty string as the separator

    result = "|".join(output_list)
    return result


def NeurosurgeryAllodermThicknessSize(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        size = item.get("NeurosurgeryAllodermSize", "") or ""
        thickness = item.get("NeurosurgeryAllodermThickness", {}).get("value", "") or ""
        output_list.append(f"{size}|{thickness}")

    result = "||".join(output_list)
    return result


def PlasticAllodermSizeThickness(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        size = item.get("PlasticAllodermSize", {}).get("value", "") or ""
        thickness = item.get("PlasticAllodermThickness", {}).get("value", "") or ""
        output_list.append(f"{size}|{thickness}")

    result = "||".join(output_list)
    return result



def PlasticStratticeSizeTickness(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        size = item.get("PlasticStratticeSize", {}).get("value", "") or ""
        thickness = item.get("PlasticStratticeTickness", {}).get("value", "") or ""
        output_list.append(f"{size}|{thickness}")

    result = "||".join(output_list)
    return result


def PlasticStratafixSizeThickness(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        size = item.get("PlasticStratafixSize", "") or ""
        thickness = item.get("PlasticStratafixThickness", "") or ""
        output_list.append(f"{size}|{thickness}")

    result = "||".join(output_list)
    return result


def PlasticImplantsSizeQuantity(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        quantity = item.get("PlasticImplantsQuantity", "") or ""
        size = item.get("PlasticImplantsSize", "") or ""
        output_list.append(f"{quantity}|{size}")

    result = "||".join(output_list)
    return result


def PlasticImplantsVendorPartNo(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        part_no = item.get("PlasticImplantsPartNo", "") or ""
        vendor = item.get("PlasticImplantsVendor", "") or ""
        output_list.append(f"{part_no}|{vendor}")

    result = "||".join(output_list)
    return result




def implantDetails(input_list):
    if not input_list:
        return ""

    output_list = []
    for item in input_list:
        item_no = item.get("itemNo", "") or ""
        model_no = item.get("modalNo", "") or ""
        other_info = item.get("otherInfo", "") or ""
        vendor = item.get("vendor", "") or ""
        output_list.append(f"{item_no}|{model_no}|{other_info}|{vendor}")

    result = "||".join(output_list)
    return result







